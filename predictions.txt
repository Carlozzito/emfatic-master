<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED Person { val Person [ * ] things ; } class Thing extends Named { att int [ NO_PRED ] id ; val Related [ * ] relations ; val abstract class Named { att String [ NO_PRED ] name ; } class Related extends Named { ref Thing [ NO_PRED ] from ; ref Thing [ NO_PRED ] to ; att String [ NO_PRED ] since ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext NO_PRED Class { Class { } Att [ * ] features ; val Class [ * ] super ; val Class [ * ] children ; att abstract Struct { att boolean [ NO_PRED ] name ; } Class [ * ] values ; } abstract Prim extends Typ { att Class NO_PRED 1 ] owner ; att String [ NO_PRED ] name ; att boolean [ NO_PRED ] value ; att NO_PRED Class { ref Type [ 1 ] type ; } NO_PRED Struct { Type { att class Extension extends Typ { ref Class [ * ] params ; val class Param extends Typ { att Block [ NO_PRED ] result ; ref String [ NO_PRED ] name ; ref class Typ extends Struct { att String [ 1 ] name NO_PRED } NO_PRED Att { att Param NO_PRED NO_PRED ] type { val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Person { att String [ NO_PRED ] title ; val Chapter [ * ] chapters ; } abstract Chapter { att String [ 1 ] title ; att int [ 1 ] n ; ref int [ 1 ] author ; att Book [ 1 ] book ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class My { val String [ 1 ] name ; ref Node [ * ] successors ; val Node [ NO_PRED ] child ; } Arc [ NO_PRED ] related NO_PRED att My [ * ] related ; } E [ NO_PRED ] children ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d abstract F { att Transition [ * ] F ; att class F { att String [ NO_PRED ] initial ; att String [ NO_PRED ] name ; ref F [ * ] transitions ; val class F { ref String [ NO_PRED ] input ; ref String [ NO_PRED ] output ; att F [ NO_PRED ] target ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package book { abstract Writer { ref String [ NO_PRED ] name ; } Book [ * ] books ; } Community [ * ] car ; } class class Book { att String [ NO_PRED ] title ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } class Library { att String [ NO_PRED ] name ; val Writer [ * ] writers ; val Book [ * ] books ; att My [ * ] my ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Family { att String [ NO_PRED ] name ; val Person [ * ] members ; val Woman [ * ] relation ; } abstract Person { att int [ NO_PRED ] name ; } String [ NO_PRED ] birth ; ref Person [ NO_PRED NO_PRED 5 ] parents ; ref Person [ NO_PRED ] children ; } Person [ NO_PRED ] mother ; } Man [ NO_PRED ] father ; ref Woman [ NO_PRED ] all ; } class Man extends Person { } NO_PRED Woman extends Person { } NO_PRED Rel extends val boolean [ NO_PRED ] name ; ref Family [ NO_PRED ] Members NO_PRED ref Table [ * ] person ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java NO_PRED Publication { val F [ * ] papers ; val class Par { att Par [ * ] authors ; } String [ NO_PRED ] name ; att class authors { att String [ NO_PRED ] name ; } int [ NO_PRED ] email NO_PRED ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class programmes NO_PRED } String [ NO_PRED ] start ; att java [ NO_PRED ] name ; att String [ NO_PRED ] credits ; att String [ 1 ] level ; att class Programme { att String [ NO_PRED ] name ; att int [ NO_PRED ] code ; att Special [ * ] special ; } Course [ * ] sem ; } Special [ * ] course ; val NO_PRED Sem { Special { att Special [ 1 ] programme ; att Special [ * ] base ; } class Sem { att Programme [ NO_PRED ] programme ; att Special NO_PRED 1 ] courses NO_PRED att int [ NO_PRED ] type ; } float [ NO_PRED ] year ; att class Special { att boolean [ NO_PRED ] name ; att double [ NO_PRED ] mandatory [ att Year NO_PRED NO_PRED ] season NO_PRED ref class Special NO_PRED att boolean [ NO_PRED ] year ; val Study NO_PRED NO_PRED ] season [ ref Sem NO_PRED NO_PRED ] course ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext abstract D { Named NO_PRED val Table [ * ] tables ; val Data NO_PRED * ] relations ; val abstract Table extends Named { att Column [ * ] columns ; val Column [ * ] foreign ; ref Column [ * ] in ; att class Column extends Named { att int [ 1 ] display ; } class class Associ extends att String [ NO_PRED ] name ; } abstract Table extends ref Table [ 1 ] table NO_PRED ref Column [ 1 ] target ; att String [ NO_PRED ] columns ; att int [ NO_PRED ] max ; att int [ NO_PRED ] max ; att int [ NO_PRED ] trigger ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package trace NO_PRED Port { O { ref String [ NO_PRED ] is ; } class Railway extends Un { Default { att E [ 1 ] time ; } Load [ NO_PRED ] mode ; ref boolean [ NO_PRED ] rank ; } class State extends Transform NO_PRED val Entry [ * ] source ; } Label [ NO_PRED ] send ; } STEM [ * ] use ; } class Syn extends Identified { val abstract Ref { Adapt { att Level [ * ] render ; } Color [ * ] in ; }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext class class Abstract { val String [ NO_PRED ] name ; att Required [ NO_PRED ] content ; val Required [ * ] required ; val Provided [ * ] provided ; } abstract class Interface { att String [ 1 ] name ; att String [ 1 ] signature ; att Binding [ * ] bindings ; } class Binding { ref Interface [ NO_PRED ] from ; ref Interface [ NO_PRED ] to ; } class Required { } Abstract [ 1 ] content ; att String [ 1 ] expression ; att String [ NO_PRED ] expression ; ref class Required { Type { } class Provided extends Interface { } class Required extends Abstract { val Provided [ * ] provided ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package m NO_PRED Model { att Persons [ * ] members ; val String [ 1 ] name ; } abstract Person { att String [ NO_PRED ] name ; att int [ 1 ] age ; att NO_PRED University extends Person { att String [ 1 ] name ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree abstract State { val State [ * ] transitions ; val Abstract [ * ] states ; } String [ NO_PRED ] name ; } boolean [ NO_PRED ] trigger NO_PRED } class State { att State [ 1 ] state ; att Abstract [ NO_PRED ] source ; ref Abstract [ 1 ] target ; att String [ NO_PRED ] label ; } String [ NO_PRED ] effect ; att abstract class Abstract { att State [ NO_PRED ] state ; att String [ NO_PRED ] name ; ref State [ NO_PRED ] composite ; } boolean [ NO_PRED ] f ; } class Initial extends Abstract { } class Regular extends Abstract { att class Final extends Abstract { } State { * ] states ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED class Named { att String [ 1 ] name ; } abstract class Class extends Named { } class Data extends Type { } class Entity extends Type { att boolean [ NO_PRED ] abstract ; val Feature [ * ] features ; } class Entity { val Type [ * ] types ; val class Feature extends Named { att Feature [ 1 ] kind ; ref Type [ 1 ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class A { val NO_PRED B { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package container { } namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package b { @ A { } E [ * ] f ; } class F { val } } E { } String [ NO_PRED ] f ; } } NO_PRED E { F { } E [ NO_PRED ] e ; } int [ NO_PRED ] f ; } D [ * ] c ; } D [ * ] b ; } NO_PRED B { } C [ NO_PRED ] c ; } boolean [ NO_PRED ] r ; } int [ * ] type ; } } E { } D [ NO_PRED NO_PRED * ] old ; } String [ * ] r ; } NO_PRED class D { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package research @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package description { @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tool { abstract B extends Style { ref java [ NO_PRED ] border ; ref Color [ 1 ] border ; } Line [ NO_PRED ] border ; } abstract class Node extends Style NO_PRED B NO_PRED Label NO_PRED Tool NO_PRED Appearance NO_PRED val boolean [ NO_PRED ] hide ; att java [ NO_PRED ] label ; att Multi [ NO_PRED ] resize ; } boolean [ NO_PRED ] resize ; val Side [ NO_PRED ] resize ; } class Default ; Node ; }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class class Abstract { att
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Unit { att C [ * ] r ; att class class Named { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Integer class } Fixed [ + ] operator ; } class Operator { } String [ NO_PRED ] name ; } Sub [ NO_PRED ] body ; val Expression [ NO_PRED ] exp ; } class Add { } class Add NO_PRED Operator { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class And extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Equality extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class And extends Expression { val Expression [ NO_PRED ] exp ; } class Un NO_PRED Binary { val boolean [ NO_PRED ] name ; } class In NO_PRED Un { } String [ NO_PRED ] type ; val class Value ; Expression { val String [ NO_PRED ] name ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Execution { ref String [ * ] key ; att Object [ 1 ] value ; } abstract Execution { ref Execution NO_PRED * ] items ; }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Model { val Statement [ * ] greet ; } class G { att int [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package hen abstract F { val Column [ * ] column ; } String [ 1 ] name ; } Foreign [ * ] constraints ; } Con [ * ] target ; } class Column { att String [ NO_PRED ] name ; String class Con { val Table [ + ] contains ; } abstract Con { att Column [ 1 ] reference NO_PRED } Table [ NO_PRED ] target ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a class Read extends Beh { } class Enc extends Node { } class Inter extends Class { ref Behavioral [ NO_PRED ] specification ; ref class St extends Node { } class Use extends Behavioral { } class State extends Class { } class Signal extends Class { } class Association extends Behavior { } class St extends Behavioral { } class Association extends Class NO_PRED } class Execution extends Behavior { } class Component extends State { } class Use extends Beh { } class Node extends Class { } class Execution NO_PRED Behavior { } class Node { } Behavior [ * ] owned ; } Behavior [ * ] method ; ref NO_PRED State { } class Execution NO_PRED Class { val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar NO_PRED Column { att String [ 1 ] title ; val java [ 1 ] pages ; att java [ 1 ] weight ; } java [ 1 ] author ; att NO_PRED Document { val java [ 1 ] class ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple class State extends Transition { ref State [ 1 ] source ; ref Abstract [ 1 ] to ; att String [ NO_PRED ] visibility ; } class State extends val State [ * ] elements ; } String [ 1 ] name ; } abstract class Abstract { att abstract class Abstract { Abstract { ref String [ NO_PRED ] id ; } abstract State NO_PRED Abstract { att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Trace { val String [ NO_PRED ] comment ; } E [ * ] source ; ref E [ 1 ] target ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Type NO_PRED att String [ NO_PRED ] mult ; } abstract Data extends Type { } class Invalid extends Data { } class Complex extends Type { } class String extends Data { } class Boolean extends Data { } class Bag extends Pred { } class Character extends Type { } Object NO_PRED 1 ] type ; } class Bag extends Type { ref Type [ NO_PRED ] element ; } class Record extends Type { val Type [ 1 ] key ; val Type [ 1 ] value ; } NO_PRED Lamb extends Type { ref Type [ 1 ] object ; val Type [ 1 ] param ; att boolean [ NO_PRED ] parameters ; } class Type extends Type { att Type { NO_PRED ] object ; att NO_PRED Att extends Type { val Type extends NO_PRED ] object NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o NO_PRED Sche { att String [ 1 ] name ; val Column [ * ] col ; val Column [ + ] primary ; val Foreign [ * ] f ; } class F { ref Table [ 1 ] references ; } Column [ + ] col ; } class Column { att java [ NO_PRED ] name ; ref java [ NO_PRED ] type ; } NO_PRED F { val Sche [ * ] table ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package trace class Pet { att Transition [ * ] transition ; val Arc [ * ] arc ; val Arc [ * ] arc ; val Place [ * ] place ; att String [ NO_PRED ] name ; } class Transition { att String [ NO_PRED ] name ; ref Arc [ * ] pre ; ref Arc [ * ] post ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] transition ; ref Place [ NO_PRED ] place ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] place ; ref Transition [ NO_PRED ] transition ; ref class Arc { att String [ NO_PRED ] place ; } Arc { NO_PRED ] place ; ref int [ NO_PRED ] weight ; } Place [ NO_PRED ] token ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext abstract Graph { att String [ 1 ] name ; } class Graph { Named { val Graph [ * ] nodes ; } Edge [ * ] edges ; val boolean [ NO_PRED ] name ; } class Node extends Graph { att String [ NO_PRED ] ID ; } boolean [ * ] values ; } String [ 1 ] leaf ; ref abstract Edge extends Graph { ref Node [ 1 ] source ; ref Node [ 1 ] target ; att String [ NO_PRED ] many ; } Graph [ 1 ] source ; } int [ NO_PRED ] remed NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Model NO_PRED val String [ NO_PRED ] name ; att String [ NO_PRED ] config ; att String [ NO_PRED ] sub ; att String [ NO_PRED ] a NO_PRED att Model NO_PRED * ] outputs ; ref Config [ * ] outputs ; att class Generator { att String [ NO_PRED ] app ; att String [ NO_PRED ] type NO_PRED } String [ NO_PRED ] name ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test @ Turtle NO_PRED val Instruction [ * ] Turtle ; val Label [ 1 ] call ; } class Turtle { att Point NO_PRED 1 ] point ; att double [ 1 ] heading ; att boolean [ NO_PRED ] pen ; att Se [ * ] segment ; val class Point { att double [ NO_PRED ] heading ; att double [ NO_PRED ] y ; } class Se { val Point [ 1 ] point NO_PRED val Point [ 1 ] end ; } class Call { val Stack [ * ] frames ; } class Stack { val String [ 1 ] config ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p NO_PRED Package { } int [ 1 ] ref ; } int [ 1 ] a ; } int [ 1 ] i ; att java [ NO_PRED ] a ; att boolean [ NO_PRED ] description ; att long [ 1 ] name NO_PRED } E [ NO_PRED ] r ; } class Att { att e [ * ] mixed ; val E [ * ] x ; val E [ * ] x ; val java [ * ] location NO_PRED val class R NO_PRED att java [ 0 ] id ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java class System { att String [ NO_PRED ] name ; val Import [ * ] typ ; } class class Typ NO_PRED att Object [ NO_PRED ] Name ; val abstract Association extends Object { att Att [ * ] member ; } Prim [ * ] primitive ; } class class Prim extends Type { att class Prim extends Member { ref class Method extends Member { att class Simple extends Member { val class Prim extends Typ { } abstract class Type extends Type { } class class Typ extends Type { } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet NO_PRED namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED } Super extends } } @ Package extends } Bar [ NO_PRED ] NO_PRED ; } NO_PRED Class extends val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package borrow { } Board NO_PRED B { } abstract Magazine { B { } class Book { Circ { ref String [ 1 ] title ; } class NO_PRED Library { val String [ NO_PRED ] location ; } Author [ * ] borrow ; } Employee [ * ] customers ; } abstract Customer { att String [ NO_PRED ] first ; } B [ * ] borrowed ; } NO_PRED class B { } String [ NO_PRED ] address ; ref int [ NO_PRED ] id ; att Customer [ 1 ] property ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test @
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type NO_PRED Pet { val Transition [ * ] ele ; } abstract class Named { att String [ NO_PRED ] name ; } class Place extends Node { } int [ 1 ] tokens ; } class Transition extends Named { ref Arc [ + ] in ; ref Place [ * ] out ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study NO_PRED Family { att String [ NO_PRED ] name ; att int [ 1 ] age ; att boolean [ NO_PRED ] CPR ; val person [ * ] spouse ; ref person [ NO_PRED ] parent ; } person [ NO_PRED ] children ; } person [ NO_PRED ] enrollment ; att class university { att String [ NO_PRED ] name ; att course NO_PRED * ] courses ; att class course { att String [ NO_PRED ] name ; val person [ 1 ] students ; att class course { att university [ [ ] family ; } person [ + ] person ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class F { att State [ * ] owned ; val State [ 1 ] initial ; val State [ + ] final ; att class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] inc ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] input ; att String [ NO_PRED ] output ; att String [ NO_PRED ] time ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package g class First { } Second [ NO_PRED ] test ; } class Second { } First [ NO_PRED ] specialization ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph class St extends endogenous { } class Output extends Multi { } class Property NO_PRED Connect { } Param [ NO_PRED ] direction ; } class Gate extends Pin { } class Time extends Multi { att Param [ * ] owned ; } class Param extends Input { } class State NO_PRED Multi { ref class Lit { att boolean [ NO_PRED ] is ; att class Decision extends Property { } class Property extends Struct { } class Struct extends Property { } class Extension extends Multi { } class Extension { Multi { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library abstract class Named { att String [ NO_PRED ] name ; } class Database extends Named { val Table [ + ] tables ; } class R extends Named { val Column [ * ] columns ; val class class Column extends Named { ref String [ 1 ] type ; att int [ NO_PRED ] size ; } boolean [ 1 ] primary NO_PRED } class Foreign extends Column { } class Foreign extends Column { ref Column [ 1 ] attribute ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Model { Named NO_PRED att T [ 1 ] value ; val class N { N { } class Float NO_PRED N { } class State extends Area { } double [ NO_PRED ] task ; ref abstract Device extends Node { } Integer [ NO_PRED ] start ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Family NO_PRED att String [ 1 ] last ; val Member [ 1 ] father ; val Member [ 1 ] mother ; val Member [ * ] sons ; val Member [ * ] daughters ; } class Member { att String [ 1 ] first ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; } NO_PRED Family extends Member { att NO_PRED Member extends Member { } NO_PRED namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package university class Stat { } State [ * ] transitions ; val State [ * ] state ; att String [ NO_PRED ] name ; ref class Transition { att String [ NO_PRED ] name ; } class Transition { ref State [ NO_PRED ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] name ; } NO_PRED State extends State { } NO_PRED Initial extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Model { val String [ NO_PRED ] name ; val Migration [ * ] elements ; } class class My { } class Model NO_PRED My { att String [ 1 ] name ; val class Migration extends My { ref My [ 1 ] element ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Book NO_PRED att class Book { att String [ 1 ] id ; att String [ 1 ] title ; att String [ NO_PRED ] author ; att int [ 1 ] n ; ref String [ 1 ] dimension ; att String [ 1 ] download NO_PRED val String [ NO_PRED ] is ; ref Book [ NO_PRED ] book ; } NO_PRED NO_PRED { att String [ 1 ] first ; att String [ 1 ] last ; ref Book [ 1 ] borrowed ; val String [ 1 ] name NO_PRED att NO_PRED Library { att Book [ * ] books ; ref Customer [ * ] customers ; val abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity abstract Pet { val Place [ * ] places ; val Transition [ * ] transitions ; } String [ NO_PRED ] name ; } class Place { ref String [ 1 ] name ; } Net [ * ] m ; ref Transition [ * ] outgoing ; ref class Transition { att String [ 1 ] name ; ref Place [ 1 ] input ; ref Place [ * ] to ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package borrow { } Library Customer B { } class R extends Book { att class Author extends Circ { } int [ 1 ] first ; att abstract @ Author { att String [ NO_PRED ] name ; } Rule [ * ] borrowed ; val Customer [ * ] customers ; val } Customer { att String [ NO_PRED ] name ; att Library [ * ] borrowed ; } ref class B { ref int [ NO_PRED ] name ; ref int [ NO_PRED ] time ; } Customer [ NO_PRED ] property ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package subs { abstract D NO_PRED } } NO_PRED N { } E [ + ] ref ; } }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Doc { val Doc [ * ] books ; val class Book { ref Article [ + ] articles ; } abstract class Tit extends att mud [ 1 ] title ; } class Article extends Tit { val Sect [ + ] sections ; } abstract class Section extends Tit { val Par NO_PRED + ] paras ; } class Sect extends Section { val Sect [ + ] sections ; } class Sect extends Section { val class Sect { att java [ 1 ] title ; } abstract namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package title NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study NO_PRED C { val Thing [ * ] things ; } NO_PRED Thing extends att int [ NO_PRED ] id ; val Related [ * ] things ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Stat { att Node [ NO_PRED ] event ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext @ Graph { Named { val Node [ NO_PRED ] nodes ; val Edge [ * ] edges ; } abstract class Graph { att Graph [ 1 ] parameters ; } String [ NO_PRED ] id ; att String [ NO_PRED ] generated ; att class Node extends Graph { ref int [ NO_PRED ] x ; att int [ NO_PRED ] Y ; } class Edge extends Graph { ref Node [ NO_PRED ] source ; ref Node [ NO_PRED ] target ; } Label [ NO_PRED ] labels ; ref N [ * ] nails ; att abstract N extends Graph { att N [ * ] label ; ref abstract Label extends Graph [ att String [ NO_PRED ] description ; att class N { att Param [ NO_PRED ] value NO_PRED att String [ NO_PRED ] value ; ref class Expression extends Value [ att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Company extends att Department [ * ] du ; val class Dept { Rep { } String [ NO_PRED ] name ; att Employee [ * ] manager ; val Sub [ * ] sub ; } class Employee extends Sub { att Sub [ NO_PRED ] person ; att String [ 1 ] salary ; } class Employee { att String [ 1 ] name ; } double [ 1 ] address ; } class class Sub { ref abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Table { R { val Table [ * ] tables ; val abstract Table { att String [ NO_PRED ] name ; att java [ NO_PRED ] name ; } class Table extends R { att Sche [ 1 ] schema ; val Column [ * ] columns ; val Key [ * ] the ; } Foreign [ * ] foreign ; } class Column extends R { ref Table [ 1 ] type ; att Column [ 1 ] key ; ref Foreign [ * ] foreign ; } boolean [ 1 ] kind ; ref NO_PRED Foreign extends R { ref Sche [ * ] column ; att Sche [ 1 ] owner ; ref NO_PRED Foreign extends Key { ref Sche [ 1 ] source ; ref Foreign [ 1 ] refers ; ref Column [ 1 ] unique ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r NO_PRED D { val Base [ * ] non ; val A [ * ] b ; } class A { } class B { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package m class Stat { val Stat [ * ] states ; } Transition [ * ] transition ; val String [ NO_PRED ] f ; } State [ NO_PRED ] initial ; } class State { att String [ NO_PRED ] name ; val class Transition { att String [ NO_PRED ] input ; att State [ 1 ] state ; ref State [ NO_PRED ] to ; } NO_PRED Initial extends State { att NO_PRED Final extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar class Model { val String [ NO_PRED ] package ; } Import [ * ] events ; } Extended [ NO_PRED ] commands ; } Block NO_PRED * ] states ; val class Event { val State [ * ] events ; } class Event { att boolean [ NO_PRED ] name ; att class State { val Command [ * ] commands ; } class Command { } String [ NO_PRED ] name ; } class Command { att String [ NO_PRED ] is ; att String [ NO_PRED ] value ; att Command [ NO_PRED ] commands ; ref Command [ * ] entry ; } Command [ * ] exit ; } class Control { att System [ * ] action NO_PRED } Event [ * ] entry extends ref Command NO_PRED * ] entry ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package trace class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package annotations NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree abstract Class { val Class [ * ] class ; } Association [ * ] associations ; } class class Named { att String [ NO_PRED ] name ; } class Association { att String [ NO_PRED ] name ; ref Class NO_PRED NO_PRED ] dest ; ref Class [ 1 ] target ; } class Class extends Class { att String [ NO_PRED ] is ; att Class [ NO_PRED ] super NO_PRED } Att [ * ] attributes ; } class Att extends Class { } class En { att String [ NO_PRED ] key ; ref String [ NO_PRED ] key ; ref Class [ 1 ] type ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a class Graph { att Graph [ * ] nodes ; val Edge [ * ] edge ; att abstract Node { att String [ NO_PRED ] name ; ref class Edge { ref boolean [ 1 ] key ; ref Node [ 1 ] source ; ref Node [ 1 ] tar ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Library { att String [ 1 ] name ; val Book [ * ] books ; val Loan [ * ] loans ; val Member [ * ] members ; } class Book { att String [ 1 ] name ; att java [ 1 ] copies ; ref Library [ NO_PRED ] library ; } Loan [ * ] loans ; } class Member { att String [ 1 ] name ; ref Library [ NO_PRED ] library ; ref Loan [ * ] loans ; ref Book [ * ] books ; } class loans { ref Book [ 1 ] book ; ref Member [ 1 ] member ; ref Date [ 1 ] date ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Region extends val Simple [ * ] events ; val Stat [ * ] reset ; val Command [ * ] commands ; val State [ * ] states ; } abstract Named { att String [ NO_PRED ] name ; att int [ NO_PRED ] code ; } class Transition extends att String [ NO_PRED ] name ; att String [ NO_PRED ] code ; att class State { att String [ NO_PRED ] name ; val Command [ NO_PRED ] actions ; } Guard [ * ] transitions ; } class Transition { att Event [ NO_PRED ] pre ; att State [ NO_PRED ] state ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat class Block { val B [ * ] el ; att String [ NO_PRED ] name ; } class B { val A [ * ] el ; att String [ NO_PRED ] name ; } NO_PRED C { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class State { Named { val State [ 1 ] stat ; } class Fin extends Named { val State [ * ] state ; val State [ 1 ] initial NO_PRED } class class Named { att String [ NO_PRED ] name ; } class State extends Named { att Program [ * ] transitions ; val Transition [ 1 ] f ; } class Transition extends ref State [ 1 ] source ; ref String [ 1 ] input ; att String [ 1 ] output ; ref State [ 1 ] source ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Company { att abstract Break extends Concept { } Concept [ * ] concept ; } class Concept { att Concept [ * ] concept ; } int [ NO_PRED ] n ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class New { D { ref class Node extends E { ref abstract Node extends Association { } int [ NO_PRED ] offset ; } class Node extends Graph { ref class M extends Node { } abstract Mix extends Node { } boolean [ NO_PRED ] offset ; } NO_PRED Met extends Graph { }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study abstract School { att Faculty [ * ] classrooms ; } Student [ * ] clock ; val abstract School { att Employee [ * ] teacher ; } abstract School { att Course [ 1 ] clock NO_PRED } NO_PRED School { att Manager [ 1 ] neighbour ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar abstract Web { att java [ NO_PRED ] first ; att String [ 1 ] last ; att Address [ * ] credit ; val Item [ 1 ] address ; val java [ 1 ] phone ; val boolean [ NO_PRED ] created ; ref class Address { att String [ 1 ] street ; att String [ NO_PRED ] city ; att String [ NO_PRED ] number ; att class Employee extends Address { } String [ 1 ] state ; } class Service extends Address { att int NO_PRED NO_PRED ] state NO_PRED } class Credit { att Object [ NO_PRED ] country ; att int [ NO_PRED ] name ; att java [ NO_PRED ] key ; att Customer NO_PRED NO_PRED ] method ; } class Address ; att Customer [ 1 ] owner ; ref java NO_PRED + ] queue ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Class extends U { ref Class NO_PRED 1 ] type ; } Class [ 1 ] type ; } class Association extends Class { ref Class [ 1 ] source ; val Class [ 1 ] source ; } abstract Class extends Class { ref General [ * ] attribute ; ref Association [ * ] forward ; } Association [ * ] general ; ref Association [ * ] general ; } Class [ * ] reverse ; att abstract class Class extends Package { ref Att [ * ] type ; } abstract Prim extends Package { val Class [ * ] elements ; } class class Class extends Class { } Class NO_PRED * ] parent ; } abstract Prim extends E { att abstract class Class { att String [ NO_PRED ] label NO_PRED } String [ NO_PRED ] namespace ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package my abstract class Not { att String [ 1 ] id ; } class class Node extends Node { val class class Node extends Dec { att int [ 1 ] level ; att int [ NO_PRED ] y ; att int [ NO_PRED ] width ; att int [ NO_PRED ] NO_PRED ; } int NO_PRED NO_PRED ] color NO_PRED att boolean [ NO_PRED ] stroke ; ref class class Node extends Node { val class Node extends Graph { val class R NO_PRED Label { val class Arrow extends Node { att B [ NO_PRED ] text ; } class Image extends Graph { att String [ NO_PRED ] color NO_PRED att class Image extends On { att abstract Image NO_PRED Value { att class class Image extends Value { att String NO_PRED NO_PRED ] value { }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class Wh { val G [ * ] program ; } class Program { val Variable [ * ] function ; } Definition NO_PRED NO_PRED ] program ; } class Function { att String [ NO_PRED ] name ; val SY [ NO_PRED ] definition ; } class Definition { val Input [ NO_PRED ] in ; val Commands [ NO_PRED ] commands ; val Output [ NO_PRED ] output ; } class Input { att String [ * ] value ; } Commands [ * ] output ; } class Output { att String [ * ] variable ; } Commands [ NO_PRED ] output ; } class Commands { val String [ NO_PRED ] input NO_PRED att Command [ NO_PRED ] commands commands } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Course NO_PRED att String [ NO_PRED ] name ; att Professor [ * ] 5 ] student ; } class University { att int [ NO_PRED ] name ; att Course [ * ] courses ; } NO_PRED University { val Person [ * ] students ; val Course [ * ] courses ; att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package trace class Book { att String [ NO_PRED ] title ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } class Library { att String [ NO_PRED ] name ; val Writer [ * ] writers ; val Book [ * ] books ; } class Writer { att String [ NO_PRED ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o class Model { val String [ NO_PRED ] new ; val Domain [ * ] f ; } Physical [ NO_PRED ] params ; val Type [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java class Family { att String [ 1 ] last ; val Member [ + ] father ; val Member [ 1 ] mother ; val Member [ * ] sons ; val Member [ * ] daughters ; } class Member { att String [ 1 ] first ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity class class Abstract { Block { } int [ NO_PRED ] name ; att class Artifact extends IP { ref IP [ 1 ] source ; ref I [ 1 ] source ; ref I [ 1 ] source ; } class Import extends I { } I [ 1 ] node ; ref I [ 1 ] links ; } class Output extends I { ref Input [ 1 ] node ; ref I [ * ] outputs ; } class Input extends I { ref IP [ * ] nodes ; att IP [ * ] edges ; att class Input extends I { ref String [ * ] name ; } String [ NO_PRED ] operation ; } class class I { att String [ NO_PRED ] label ; } String [ NO_PRED ] label ; ref abstract class I { I { att Process NO_PRED NO_PRED ] label NO_PRED } I [ NO_PRED ] name NO_PRED ref Data [ * ] in NO_PRED ref String [ * ] output NO_PRED ref boolean [ * ] output { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package m class I { val I [ NO_PRED ] spec ; val abstract I { val String [ NO_PRED ] name ; val Bro [ * ] m ; } Message NO_PRED * ] message ; } class Bro { att String [ NO_PRED ] broker ; att int [ NO_PRED ] broker Get } class Bro { att String [ NO_PRED ] message ; } String [ NO_PRED ] message ; } class Bro NO_PRED Message NO_PRED } class Bro extends Message { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Named { att String [ 1 ] name ; ref Employee [ NO_PRED ] parent ; ref Att [ * ] att ; } class Association { att String [ NO_PRED ] name ; ref Class [ 1 ] src ; ref Class [ 1 ] dest ; att String [ NO_PRED ] min ; att NO_PRED Att { att String [ NO_PRED ] name ; att String [ NO_PRED ] multi ; ref Class NO_PRED 1 ] type ; } Prim [ NO_PRED ] p ; } class Prim { att String [ NO_PRED ] name ; } NO_PRED Association { val Class NO_PRED + ] class ; att Association [ * ] ass ; ref Association [ * ] p ; NO_PRED NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type class Tournament { att String [ NO_PRED ] name ; att String [ 1 ] street ; val String [ NO_PRED ] date ; att Date [ 1 ] end ; val Match [ 0 ] tournament ; val Match [ 1 ] lear ; } Editor [ 1 ] current ; } Rule [ * ] qualification ; } double [ NO_PRED ] rank NO_PRED val class League { ref int [ 1 ] id ; att int [ 1 ] last ; ref java [ 1 ] name NO_PRED att java [ 1 ] shelf ; att int [ 1 ] distortion ; att class M { att Date [ 0 ] title ; } Tournament [ NO_PRED ] origin ; att class M { att Rule [ + ] 2 NO_PRED topic ; att NO_PRED Node [ att Area NO_PRED 2 ] 2 NO_PRED distortion { ref Match [ + ] ultra { val class Slot NO_PRED } Slot { * NO_PRED burst ; } Type [ * NO_PRED role NO_PRED ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Gram { val Rule [ * ] tables ; } abstract table { val String [ NO_PRED ] name ; } Column [ * ] facts ; } NO_PRED Column { att String [ 1 ] name ; } String [ NO_PRED ] type ; att boolean [ NO_PRED ] is ; } class Foreign { } Column [ * ] p NO_PRED } class foreign { ref Column [ * ] foreign ; ref Column [ * ] reference ; } NO_PRED Reference { ref Column [ NO_PRED ] ref NO_PRED ref Column [ * ] attribute ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c { abstract E extends NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package feature class Entity NO_PRED val String [ 1 ] title ; } Page [ + ] groups ; ref class Item { att Condition [ + ] item ; } Option [ 1 ] dependent ; ref String [ NO_PRED ] explanation ; } String [ 1 ] explanation ; } class class Selection { att class Selection extends Item { } class Choice extends Item { } Option [ + ] options ; } String [ NO_PRED ] multiple ; } class Option { att String [ NO_PRED ] name ; att String [ NO_PRED ] text ; val abstract Priority extends Item { att class Time extends Item { } class Option { att Option NO_PRED NO_PRED ] items ; } boolean NO_PRED NO_PRED ] items ; } class Time extends Item { ref Option NO_PRED NO_PRED NO_PRED option { att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Class { val Class [ * ] classes ; val Association [ * ] associations ; val abstract class Named { att String [ 1 ] name ; } abstract Class extends Named { val Class [ 1 ] parent ; val Att [ + ] attributes ; val class Association extends Named { ref Class [ 1 ] source ; ref Class [ 1 ] target ; att int [ 1 ] lower ; att int [ 1 ] upper ; } abstract Att extends Named { att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple NO_PRED class Located { att String [ NO_PRED ] location ; } abstract class Named extends Located { att java [ NO_PRED ] name ; } abstract Pet extends Named { val Element [ * ] elements ; val Arc [ * ] arcs ; } abstract class Element extends Typ { ref Pet [ 1 ] net ; ref class Place extends Element { ref Transition [ * ] incoming ; ref Place [ * ] outgoing ; } class Transition extends Element { ref Place [ + ] incoming ; ref Trans [ + ] outgoing ; } NO_PRED class Arc extends Element { } Integer [ 1 ] weight ; } Pet [ NO_PRED ] weight @ } class Place extends Element { ref Net NO_PRED 1 ] net Place } Ref NO_PRED 1 ] incoming Place ref NO_PRED Place [ Node { ref Place NO_PRED 1 ] incoming Place ref Place [ 1 ] incoming NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package t class Process { att Region [ * ] main ; val Branch [ * ] process ; val
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph class MMA { val Element [ * ] elements ; } abstract class Element { ref String [ 1 ] name ; ref Element [ * ] ab ; ref Element [ * ] sources ; att Element [ 1 ] parent ; att abstract A extends Element { ref class B extends Element { ref class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Prim NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED Feature { val Feature NO_PRED NO_PRED ] constraints ; val Feature [ * ] root ; att String [ 1 ] name ; val Group [ NO_PRED ] const ; att Feature [ 1 ] parent ; ref abstract Con extends att String [ 1 ] name ; } String [ 1 ] min ; att int [ 1 ] max ; att Group [ * ] attributes ; val Group [ * ] groups ; val Group [ NO_PRED ] parent ; } class Group { val boolean [ 1 ] min ; att int [ 1 ] max ; } Feature NO_PRED 2 ] parent ; val Group NO_PRED 1 ] features ; } class Att { att String [ 1 ] parent { att String [ 1 ] language ; ref class Requ NO_PRED } Feature NO_PRED 1 ] parent NO_PRED att String [ 1 ] language ; val String [ 1 ] name [ ref String [ 1 ] name ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Ex { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package b NO_PRED Package { val Root NO_PRED * ] children ; } NO_PRED Node { att String [ NO_PRED ] name ; att Tree [ * ] children ; } Node [ NO_PRED ] parent ; } class Leaf extends Node { att NO_PRED Node extends Node { } String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Feature { val Feature [ * ] f ; } class Feature { ref String [ NO_PRED ] mandatory ; att boolean [ NO_PRED ] name ; ref Feature NO_PRED NO_PRED ] feature ; ref Feature [ NO_PRED ] is ; } boolean [ NO_PRED ] class NO_PRED att Feature [ * ] short ; } Att [ * ] uses ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple NO_PRED T NO_PRED val boolean [ 1 ] name ; } class Simple extends Type { } class Void extends Type { ref NO_PRED Entity extends Type { ref Type [ NO_PRED ] super ; } Feature NO_PRED * ] properties ; } class Property { att Cell [ 1 ] type ; att String [ 1 ] name ; } class En extends Type { val int [ 1 ] dimensions ; } NO_PRED Class extends ref Type [ NO_PRED ] referenced ; } Array [ NO_PRED ] super ; } class Prim extends Type { ref Type [ * ] properties ; val Type [ * ] operation ; val class Composite extends att Param [ NO_PRED ] first ; val String [ 1 ] name ; } Type NO_PRED 1 ] target ; } String [ NO_PRED ] source ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class A { val B [ * ] el ; att String [ NO_PRED ] name ; } class B { val A [ * ] el ; att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class Feature { Mod { att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class New { ref New [ NO_PRED ] f ; } New [ * ] new ; ref New [ * ] new ; val New [ NO_PRED ] new ; val class New { att Integer [ NO_PRED ] key ; att Boolean [ NO_PRED ] value ; } class New { att Boolean [ NO_PRED ] key ; att Boolean [ NO_PRED ] value ; } NO_PRED New { att Boolean [ NO_PRED ] key ; att Boolean [ NO_PRED ] value ; } class New { att Boolean [ NO_PRED ] value NO_PRED } Boolean [ NO_PRED ] value ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package family class Graph { att String [ NO_PRED ] name ; } int [ NO_PRED ] type ; } int [ NO_PRED ] size ; } class Edge { ref Node [ 1 ] source ; ref Node [ 1 ] target ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met class Column extends R { ref Field [ 1 ] owner ; ref Foreign [ * ] foreign ; ref Key [ * ] key ; att String [ NO_PRED ] kind ; } abstract Foreign extends R { ref Sche [ 1 ] refers ; ref Column [ * ] column ; att Table [ 1 ] owner ; } Column [ 1 ] schema ; } class Sche extends R { ref Column [ 1 ] owner ; ref Column [ * ] column ; att class class R { att String [ NO_PRED ] name ; } String [ NO_PRED ] comment ; att abstract Foreign extends R { val Table [ * ] tables ; att NO_PRED Sche extends R { ref Sche [ * ] column ; ref Sche [ * ] schema [ ref Sche [ * ] column Sche ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families abstract class Met extends ref String [ NO_PRED ] name ; } My [ * ] friends ; } Person [ 1 ] no ; ref class Student extends Person { } class Woman extends Person { } NO_PRED Friend { att Class [ * ] Student ; val String [ 1 ] teacher ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package t class Super extends Multiple { ref D [ NO_PRED ] many ; ref class B extends A { ref E [ NO_PRED ] to ; } R [ + ] b ; } class My extends Named { ref D [ 1 ] edge ; } NO_PRED D extends Edge { } class Vector { ref D [ 1 ] edge ; } NO_PRED D extends att NO_PRED D extends ref A [ 1 ] d ; } NO_PRED E extends } D [ * ] edge ; } NO_PRED K extends ref class E extends att E [ 1 ] l NO_PRED } NO_PRED N { Graph { } }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Persons class Model { val Table [ * ] database ; } class Database { att Column [ * ] tables ; } class Table { att String [ NO_PRED ] name ; val Column [ * ] facts ; } class Column { att String [ NO_PRED ] name ; att String [ NO_PRED ] type ; } int [ NO_PRED ] null ; } class Foreign { att Column [ NO_PRED ] columns NO_PRED } class Foreign { ref Column [ * ] col ; ref Table [ 1 ] foreign ; } Column [ * ] bye ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED class Component extends att String [ NO_PRED ] name ; } Function [ * ] predecessor ; ref Function [ 1 ] input ; val Output [ * ] output ; val Description [ * ] output ; } abstract Library extends ref Function [ * ] functional ; val String [ NO_PRED ] name ; val class Input { att String [ NO_PRED ] id ; val Function [ * ] patterns ; } class Input { val Ab [ NO_PRED ] System ; val Thoughts [ NO_PRED ] associations ; } class System NO_PRED Abstract { } Function NO_PRED NO_PRED ] parent ; } External NO_PRED NO_PRED ] parent ; val class System NO_PRED Abstract { att Function NO_PRED * ] functions ; } class System { Sub { att class Re { Named { att NO_PRED class Transition { ref String NO_PRED * ] task NO_PRED val class Transition { att System { * ] name NO_PRED } Interface [ NO_PRED ] p NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Test { val String [ * ] test ; ref String [ * ] test ; } class String { att String [ NO_PRED ] test ; att String [ NO_PRED ] value ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o NO_PRED Resource { val Block [ * ] greet ; } class G { } String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Concept { att class Concept extends Concept { } String [ NO_PRED ] name ; } NO_PRED Concept { } Concept [ * ] ax ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class E { att String [ NO_PRED ] t ; ref String [ NO_PRED ] guard ; att State [ 1 ] source ; ref Abstract [ 1 ] to ; } String [ NO_PRED ] guard ; } abstract class Abstract { ref Abstract [ * ] out ; ref Transition [ * ] outgoing ; } Initial [ * ] actions ; ref String [ NO_PRED ] name ; } class Initial extends Abstract { val State [ * ] states ; val Initial [ * ] transitions ; } class Normal { val State [ 1 ] initial ; val class Initial extends State { } class Final extends State { att class Final { State { } class Regular { ref String { NO_PRED ] guard ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Book { att String [ NO_PRED ] is ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } class Library { att String [ NO_PRED ] name ; val Writer [ * ] writers ; val Book [ * ] books ; } class Writer { att String [ NO_PRED ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package min abstract Table NO_PRED val D [ NO_PRED ] f ; } class F { } NO_PRED G extends F { } NO_PRED H { F { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Named { val Graphic [ * ] elements ; } abstract Node extends Graphic { ref Node [ 2 ] source ; ref Node [ 1 ] target ; val abstract class Node { Graphic { att Node [ NO_PRED ] child ; } java [ NO_PRED ] label ; } class Leaf extends Node { att String [ 1 ] icon ; att class Circle extends Graph { att java [ NO_PRED ] radius ; att class Ell NO_PRED Container { } java [ NO_PRED ] corner ; att java [ NO_PRED ] radius ; att class class Graph { att java [ NO_PRED ] color ; } String [ NO_PRED ] palette ; att String [ NO_PRED ] palette ; val class class B NO_PRED Node { att Prim [ NO_PRED ] palette NO_PRED val abstract Graph NO_PRED Node { att java [ NO_PRED ] palette ; } java [ NO_PRED ] range ; val abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study abstract Stat { val java [ NO_PRED ] name ; val Abstract [ * ] states ; val Transition [ * ] events ; } Command [ * ] transitions ; } State [ NO_PRED ] initial ; } class State { att String [ NO_PRED ] name ; } class Transition { att String [ NO_PRED ] name ; } class Transition { att State [ NO_PRED ] next NO_PRED ref State [ NO_PRED ] to ; ref State [ NO_PRED ] to ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Application NO_PRED } F NO_PRED 1 ] roots ; att E [ NO_PRED ] m ; }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED Base NO_PRED ref C NO_PRED 1 ] a ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package trace class A { val B [ * ] el ; att C [ * ] c ; att String [ NO_PRED ] name NO_PRED } class B { val String [ NO_PRED ] name ; att String [ NO_PRED ] description ; att String [ NO_PRED ] description ; att String [ NO_PRED ] description ; } class C { att String [ NO_PRED ] name ; att String [ NO_PRED ] style ; att String [ NO_PRED ] description ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Course { val Course NO_PRED * ] courses ; } class Course { att String [ 1 ] text ; att Gr NO_PRED * ] grad ; } class class Task { att String [ NO_PRED ] name ; } Gr [ NO_PRED ] min ; val class Min extends Task { } double [ NO_PRED ] budget ; } class Min extends Task { ref Task [ 2 ] contains ; } abstract Min { } int [ NO_PRED ] ID ; } Min [ NO_PRED ] type ; } class Con extends att Grade NO_PRED * ] grades ; ref Grade [ 1 ] Grade ; } NO_PRED Grade { att String [ 1 ] grade ; att grades [ 1 ] grade NO_PRED att NO_PRED Grade { att Grade ; NO_PRED ] grade ; att Grade [ + ] Grade ; } java NO_PRED 1 ] grade [ att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package x @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Sub { class Sub { } abstract class Sub { } } abstract Test extends ref String [ NO_PRED ] non ; val Test [ NO_PRED ] test ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package b class Course NO_PRED att Faculty [ * ] pupils ; } class P { att P [ * Tee read ; } String [ 1 ] name ; att NO_PRED P NO_PRED Book { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Column { att String [ 1 ] name ; val Table [ * competitive cont ; val Foreign [ * ] foreign ; } class Table { att String [ NO_PRED ] name ; att Column [ 1 ] schema ; val Key [ * ] column ; val Key [ * ] key ; val Foreign [ * ] has ; } class Foreign { att String [ NO_PRED ] name ; ref boolean [ NO_PRED ] type ; att Table [ 1 ] owner ; } Foreign [ * ] key ; ref Foreign [ * ] has ; } class Foreign { att String [ NO_PRED ] name ; ref Sche [ 1 ] column ; ref column [ + ] belongs ; att Column [ 1 ] column ; ref NO_PRED Foreign NO_PRED } Column [ 1 ] _ { } Column NO_PRED 1 ] name NO_PRED } String [ 1 ] schema ; } Column [ 1 ] refers { ref Table [ 1 ] has ; ref NO_PRED Column NO_PRED ref Sche [ 1 ] column [ ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Column { R { ref String [ 1 ] type ; ref Table [ 1 ] owner ; ref Table [ * ] foreign ; ref Primary [ * ] key ; att abstract Foreign extends R { ref Key [ 1 ] refers ; ref Column [ * ] column ; ref Table [ 1 ] owner ; } NO_PRED Key extends R { ref Column [ 1 ] owner ; ref Column [ * ] column ; } boolean [ NO_PRED ] unique NO_PRED att class class R { att String [ NO_PRED ] name ; att int [ NO_PRED ] comment NO_PRED att NO_PRED Sche extends R { val Table [ * ] tables ; val NO_PRED Key extends R { ref Column [ * ] tables ; ref Table [ * ] tables { } Column [ + ] sche ; } Foreign [ + ] sche ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class A { ref String [ NO_PRED ] a ; } B [ * ] b ; } class B { att C [ * ] a ; att class My { } A [ * ] a ; } A [ * ] b ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r class Book { att String [ NO_PRED ] title ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } class Library { att String [ NO_PRED ] name ; val Writer [ * ] writers ; val Book [ * ] books ; val class Writer { att String [ NO_PRED ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class A { val BAS [ * ] ref ; val BAS [ NO_PRED ] c ; } class BAS { val BAS [ * ] non ; } NO_PRED C { att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class State NO_PRED att Transition NO_PRED NO_PRED ] variables ; ref class State { att State [ * ] states ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Place { Element { ref int [ NO_PRED ] jet ; ref class Pet extends No { ref No [ 1 ] jet ; val No [ 1 ] predecessor ; att int [ NO_PRED ] may ; } String [ 1 ] weight ; } class Arc extends No { att NO_PRED Arc extends att String [ NO_PRED ] name ; } State [ * ] pet ; } abstract class Pet { att Arc NO_PRED NO_PRED ] predec ; att class class Arc { Pet { } Arc [ NO_PRED ] out ; ref Arc [ NO_PRED ] arcs ; ref int [ NO_PRED ] optional ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Book { val Library [ * ] my ; } Person [ * ] all ; } Author [ * ] all ; } NO_PRED Library { att String [ 1 ] title ; att String [ NO_PRED ] author ; att Author [ NO_PRED ] author ; } class class Item { } String [ NO_PRED ] name ; } class Library { val String [ NO_PRED ] name ; att Book [ * ] books ; val Loan [ * ] loans ; val class Loan { ref Book [ NO_PRED ] borrower ; ref Book [ NO_PRED ] book ; ref NO_PRED Customer { Abstract { val NO_PRED Author { Abstract { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Transition { att State [ * ] owned ; ref State [ 1 ] initial ; ref State [ + ] final ; } class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] incoming ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] input ; att String [ NO_PRED ] output ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED class Unit extends ref Unit [ NO_PRED ] unit ; att String [ 1 ] unit ; } class class Unit { } abstract Base extends } String [ 1 ] units ; } class Unit { val Base [ * ] units ; } abstract Unit extends Unit { val Unit [ * ] units ; } class Unit extends Unit { val Unit [ 1 ] unit ; att int [ 1 ] exponent ; } class Unit extends Unit { ref Base [ 1 ] base ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Fault { } String [ NO_PRED ] m ; att int [ 1 ] o ; } B [ NO_PRED ] b NO_PRED } A [ * ] f NO_PRED } class B { att int [ 2 ] b ; att int [ 1 ] y ; } K [ NO_PRED ] ba ; } A [ NO_PRED NO_PRED as ; } class C { att float [ NO_PRED ] b ; att B [ 1 ] OW ; ref M [ NO_PRED ] b ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class ER extends Named { val ER [ * ] entities ; } abstract Entity extends Element { att Feature [ * ] features ; } abstract class Feature extends Element { } class Reference extends Feature { att String [ NO_PRED ] type ; } class Weak extends Strong { } class Strong extends Reference { } abstract class Element { } String [ NO_PRED ] name ; } NO_PRED class Weak extends Element { ref Entity [ 1 ] type ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Wheel { att Vehicle NO_PRED 2 ] from ; val State [ NO_PRED ] final ; ref Travel [ * ] states ; } class State { } String [ NO_PRED ] name ; att Action [ NO_PRED ] incoming ; } Transition [ * ] outgoing ; } F [ NO_PRED ] league ; } class Transition { att String [ NO_PRED ] name ; att String [ NO_PRED ] action NO_PRED att State [ NO_PRED ] source ; ref State [ NO_PRED ] source ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet @ Trace { ref
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c class Feature { val String [ NO_PRED ] name ; val Feature [ 1 ] root ; att Feature [ * ] c ; val class Feature { att String [ 1 ] name ; val String [ 1 ] name ; att String [ 1 ] mandatory ; val Feature [ * ] children ; } Group [ 1 ] parent ; ref int [ 1 ] selected ; } class class Cross { } class Feature extends Feature { att abstract Mandatory extends Feature { val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Test { } B [ 1 ] b ; } C [ * ] cs ; } int [ NO_PRED ] name ; } class B { att String [ NO_PRED ] name ; } class C { } String [ NO_PRED ] name ; } A gunshot * ] ref NO_PRED } class D { att C [ * ] as ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat class Inst extends Property { } class Property extends Property { } class Property { } Agg [ NO_PRED ] is ; } boolean [ NO_PRED ] is ; NO_PRED NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Test class Family { } Person [ NO_PRED ] families ; } abstract Family { att Member [ 1 ] members ; } Woman [ * ] pets ; val abstract Person { att String [ NO_PRED ] name ; att Pet [ 1 ] children ; ref pet [ 0 ] mother ; att Person [ * ] all ; } abstract Net { ref String [ NO_PRED ] name ; att NO_PRED
<s> judicial namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model NO_PRED Trace { ref Tim [ NO_PRED ] list ; } Trace [ * ] list ; } class Trace { val Trace [ * ] items ; } class class Trace { } E [ NO_PRED ] targets ; } boolean [ NO_PRED ] to ; att class Trace { ref E [ 1 ] from ; ref E [ * ] items ; att class Trace extends Trace { ref E [ 2 ] to ; ref class M extends Trace { ref String [ NO_PRED ] trace NO_PRED att String [ NO_PRED ] value NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Pet NO_PRED ref E [ * ] trace ; val Source NO_PRED 1 ] ent NO_PRED ref abstract Trace extends val Trace [ + ] source ; ref
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p NO_PRED Feature { val Feature NO_PRED 1 ] root ; val Con [ * ] Con NO_PRED val abstract Root { att B [ * ] config ; val class class Root { } abstract Mandatory extends Con { val Feature [ 1 NO_PRED selected ; } String [ 1 ] type ; } class Att NO_PRED } Feature [ 1 ] conf NO_PRED att String [ NO_PRED ] min ; att String [ NO_PRED ] name ; att class class Direct extends Con { } String [ NO_PRED ] kind ; ref Expression NO_PRED 1 ] features ; } class Att extends Feature { } class X extends Configuration { val class Config extends Bundle { val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED State NO_PRED att String [ NO_PRED ] name ; val State [ * ] machines ; } class Stat { att String [ NO_PRED ] initial ; } String [ NO_PRED ] name ; val String [ NO_PRED ] n ; val Stat [ * ] events ; } Stat [ * ] states ; } class Event { att String [ NO_PRED ] name ; att class State { att String [ NO_PRED ] initial ; att String [ NO_PRED ] name ; } Stat [ * ] transitions ; } class Transition extends State { ref int [ NO_PRED ] value ; } class Transition extends State { att Stat [ NO_PRED ] initial ; } class Transition { ref Event { NO_PRED ] pre { ref State [ NO_PRED ] parent [ } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Model { val Entity [ * ] entities ; } class Entity { att String [ NO_PRED ] name ; val Entity [ NO_PRED ] super ; val Att [ * ] fields ; } Method [ * ] statements ; } class Field { } Field [ NO_PRED ] expression ; } class Field extends Statement { att Param [ NO_PRED ] field ; val class Att extends Statement { val class Error { } class Array { att Expression [ NO_PRED ] type ; att boolean [ NO_PRED ] name ; } class Array { } class Type extends Type { } String [ NO_PRED ] type ; } NO_PRED N extends Type { } Entity [ NO_PRED ] type ; } class Lit extends Number { } String [ NO_PRED ] value ; att class Boolean extends Lit { att String [ NO_PRED ] value [ } class Array { Expression { att String [ NO_PRED ] value NO_PRED } class Float NO_PRED Value { val Var NO_PRED NO_PRED ] att NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Pet { val Transition [ * ] transition ; val Arc [ * ] arc ; val Arc [ * ] arc ; val Place [ * ] place ; att String [ NO_PRED ] name ; } class Transition { att String [ NO_PRED ] name ; ref Arc [ * ] pre ; ref Arc [ * ] post ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] transition ; ref Place [ NO_PRED ] place ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] place ; ref Transition [ NO_PRED ] transition ; ref class Arc { att String [ NO_PRED ] place ; ref Arc { * ] type ; NO_PRED int [ NO_PRED ] token ; } Place [ NO_PRED ] weight ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph class Process { att String [ 1 ] name ; val Process [ * ] process ; } class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ NO_PRED ] name ; } All NO_PRED * ] allocations ; } class Work extends Process { att Work [ 1 ] link ; ref Work [ 1 ] predecessor ; ref Work [ 1 ] successor ; } NO_PRED class Process { } class Guid extends Process { ref Process [ 1 ] element ; att String [ NO_PRED ] text ; } NO_PRED R extends Process { att String [ NO_PRED ] text ; } String [ 1 ] text ; } class R { All { ref String [ 1 ] count ; ref All Process NO_PRED ] request ; ref Guid [ * ] name ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Transition { val String [ NO_PRED ] name ; val State [ * ] states ; val Transition [ * ] transition ; val class State { att String [ NO_PRED ] name ; att class Transition { val String [ NO_PRED ] name ; ref State [ 1 NO_PRED 2 ] state ; } String [ NO_PRED ] trigger ; att NO_PRED State extends State { } abstract Final extends State { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a abstract Tree { val Tree [ * ] children ; ref Tree [ NO_PRED ] parent ; att String [ NO_PRED ] label ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f abstract Module { att String [ 1 ] name ; ref Channel [ * ] channel ; val Event [ * ] machines ; att class Stat { att String [ NO_PRED ] name ; } Stat [ Transition ] initial ; val State [ * ] state ; } Transition [ * ] transition ; } class State { ref String [ NO_PRED ] type ; } String [ NO_PRED ] name ; } class Transition { att State [ NO_PRED ] t ; ref State [ NO_PRED ] target ; val State [ NO_PRED ] target ; } Condition [ * ] Event ; } @ State { att String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math class C { att String [ 1 ] name ; att Sub [ * ] employees ; } int [ 1 ] size ; att abstract Employee { att String [ 1 ] name ; att Employee [ NO_PRED ] manager ; att Company [ 1 ] company ; att Employee [ * ] direct ; ref Employee [ * ] all ; ref Employee [ * ] reporting ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Super { val String [ NO_PRED ] name ; val Department [ * ] departments ; val java [ 1 ] Mean ; att class Department { att String [ * ] name ; val Employee [ * ] manager ; } Department [ * ] employees ; } Department [ * ] departments ; att boolean [ NO_PRED ] biggest ; val class Employee { att String [ NO_PRED ] name ; att String [ NO_PRED ] short ; } int [ NO_PRED ] salary ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph abstract Graph { val Node [ * ] vert ; } Edge [ * ] edges ; } abstract Vert { att String [ NO_PRED ] name ; att NO_PRED Edge { att Vert [ NO_PRED ] from ; ref Vert [ NO_PRED ] to ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple abstract class Element { att String [ 1 ] name ; } abstract Path extends Element { val State [ + ] states ; val Transition [ * ] transitions ; } class class State { ref Transition [ * ] incoming ; ref Transition [ * ] outgoing ; ref Path [ 1 ] owner ; } class Transition extends Element { ref State [ 1 ] source ; ref State [ 1 ] target ; } class Initial extends State { An { } class State extends State NO_PRED B { } class Internal extends State { att int [ 1 ] att String att NO_PRED class State extends } int [ 1 ] value ; } NO_PRED namespace ( ur = NO_PRED NO_PRED I = NO_PRED ) NO_PRED type NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model NO_PRED class CST { ref
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Model { att Database [ NO_PRED ] query ; } Column [ NO_PRED ] Surgery ; att class Table { Select { val Column [ * ] columns ; val class Column extends } Select [ NO_PRED ] tables ; att Column [ + ] to ; } class Column extends Named { ref class class Named { att String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test @ class E { } class A NO_PRED Root { att B [ NO_PRED ] ref ; } int [ NO_PRED ] name ; } abstract B extends Root { ref D [ 1 ] ref ; att ref
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met class electors { val A [ * ] contains ; val B [ * ] contains ; val C [ * ] contains ; } class A { att String [ NO_PRED ] name ; } B [ NO_PRED ] ref ; } C [ * ] cont ; } class B { att String [ NO_PRED ] name ; } class C { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class design { Type { val class Att { } String [ NO_PRED ] name ; att java [ NO_PRED ] type ; att NO_PRED Entity { att String [ NO_PRED ] name ; ref String [ NO_PRED ] type ; att class Att NO_PRED val Class [ * ] abstract ; } Att [ * ] relations ; } boolean [ NO_PRED ] language ; } class Rel { Class { } NO_PRED Class { Rel { att NO_PRED General extends Rel { } class Prim extends Rel { } class class Rel { att Class [ NO_PRED ] target ; ref Class [ 1 ] target ; } class Param extends Rel { } NO_PRED Typ extends Rel { att class Association extends relation { val class class Named { att Class extends * ] elements { att Att extends * ] attributes { } String [ * ] operations ; ref String [ NO_PRED ] visibility ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package x @ Container { att NO_PRED C { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract Player { att String [ NO_PRED ] name ; att Date [ NO_PRED ] date ; att double [ NO_PRED ] height ; att double [ NO_PRED ] is ; } class League { att String [ NO_PRED ] name ; val Player [ * ] players ; } class Tournament { val Tournament [ NO_PRED ] title ; ref Match [ * ] matchups ; att Tournament [ NO_PRED ] type ; } class Match { val Game [ 2 ] games ; } int [ NO_PRED ] name ; } class Game { ref Match [ 1 ] player ; ref int [ NO_PRED NO_PRED 10 ] weight ; ref class Match { ref String [ NO_PRED ] leagues ; att League NO_PRED 0 ] leagues ; } League [ NO_PRED ] leagues ; ref League [ * ] leagues ; } NO_PRED Lane { att Match [ * ] leagues Lane } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class Net { val Place [ * ] places ; val Transition [ * ] transitions ; } abstract Place { ref Place [ + ] input ; ref Place [ + ] output ; att String [ NO_PRED ] name ; } abstract Place { att String [ NO_PRED ] name ; att String [ NO_PRED ] tokens ; val Token [ * ] tokens ; } class Token { } NO_PRED Net NO_PRED ref Net NO_PRED 1 ] net NO_PRED } class Transition { ref Net [ NO_PRED ] transition ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Trace { val Trace [ * ] links ; } class Trace { att E [ 1 ] sources ; ref E [ * ] targets ; NO_PRED String [ NO_PRED ] description ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Tree { val String [ NO_PRED ] name ; val Node [ NO_PRED ] parent ; } Node [ * ] child ; } Node NO_PRED NO_PRED ] data ; val Graph [ NO_PRED ] all ; } NO_PRED Association { att String [ NO_PRED ] name ; att Node [ * ] parent ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f NO_PRED An { } Abstract [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( unequivocally = NO_PRED NO_PRED prefix = NO_PRED ) revol Families class Model { val Page [ * ] elements ; } String [ NO_PRED ] id ; ref Operation [ * ] containment ; att Element [ * ] enumer ; } Element [ * ] sub ; } Element [ * ] list ; } Element [ * ] content ; } Element [ * ] enumer ; } Element [ * ] multi ; } Element [ * ] list ; } Element [ NO_PRED ] author ; } Element [ * ] list ; att class Element NO_PRED att boolean [ NO_PRED ] name ; ref class End { Class NO_PRED att class Rule { Class { ref class Operation extends Element NO_PRED ref class Level { Class NO_PRED att class Level { Class { ref class Par { Act NO_PRED } class Range { Arc NO_PRED } class Level { Element NO_PRED ref class State { Interface { att class Usage { Element NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Model { Named { ref B [ * ] d ; } C [ * ] s ; } String [ NO_PRED ] f ; att class B extends A { } NO_PRED C { A { } D [ NO_PRED ] e ; } NO_PRED D { ref D [ * ] g ; att NO_PRED E { att class E { } C [ NO_PRED ] e ; } String [ NO_PRED ] g ; att NO_PRED F { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Met { att Met [ NO_PRED ] name ; val Met [ * ] metrics ; } class Met { att String [ 1 ] name ; att String [ NO_PRED ] value ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package description { @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package style { abstract B extends Style { att java [ NO_PRED ] border ; ref Color [ 1 ] border ; } Line [ NO_PRED ] border ; } abstract class Node extends Style { B NO_PRED Label NO_PRED Tool NO_PRED Text NO_PRED Tool String [ NO_PRED ] icon ; att String [ NO_PRED ] line ; att Link [ NO_PRED ] resize ; att Side [ NO_PRED ] offset ; ref class Default extends Ed { }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package database class Tree extends Tree { } Node [ 1 ] attribute ; } java [ NO_PRED ] type ; } NO_PRED Data extends Tree { att Folder [ 1 ] folder ; att File [ * ] root ; val NO_PRED Folder extends Tree { val Folder [ + ] sub ; val Folder [ 1 ] parent ; } Cont [ 1 ] file ; att class Named extends Model NO_PRED ref File NO_PRED NO_PRED ] text ; val Tree [ * ] attribut ; } String [ NO_PRED ] width ; att int [ 1 ] NO_PRED ; att int [ 1 ] end ; } int [ 1 ] start ; att abstract File { File { ref Att { * ] parent ; } NO_PRED class Folder { att String [ NO_PRED ] parent { att String [ 1 ] index ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type class Net { ref Net [ 1 ] net ; ref Transition [ * ] out ; ref TP [ * ] in ; } abstract Transition extends att Net [ 1 ] net ; ref PT [ + ] in ; ref TP [ + ] out NO_PRED } abstract Net { val Place [ + ] place ; val Transition [ + ] transition ; } Net [ + ] pt ; val TP [ + ] pt ; val class PT { ref Transition [ 1 ] net ; ref Transition [ 1 ] src ; ref Place [ 1 ] src ; } NO_PRED TP { ref Transition [ 1 ] src ; ref Transition [ 1 ] src ; ref Place [ 1 ] dst ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Family NO_PRED att String [ 1 ] last ; ref Member [ NO_PRED ] father ; val Mother [ 1 ] mother ; val Son [ * ] sons ; val Daughter [ * ] daughters ; } abstract class Member { } String [ 1 ] first ; } class Father extends Member { ref Family [ 1 ] family ; ref abstract Mother extends Member { ref Family [ NO_PRED ] family ; ref class Son extends Member { ref Family [ NO_PRED ] family ; ref class Daughter extends Member { ref Family [ NO_PRED ] family ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Process { att String [ 1 ] name ; val Process [ * ] work ; val Process [ + ] work ; } class Work { att Work [ 1 ] links ; ref Work [ * ] links ; att String [ 1 ] name ; } class Work { att Work [ 1 ] link ; ref Process [ 1 ] predecessor ; ref Work [ 1 ] successor ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class Package { Names { } class Association extends U { ref Class [ 1 ] type ; } Class [ 1 ] namespace ; } class Association NO_PRED Class { ref Operation [ * ] attribute ; ref Class [ NO_PRED ] general ; ref Association [ NO_PRED ] forward ; } Association [ * ] owner ; } class Model extends Model { ref Class NO_PRED 1 ] source ; ref Class [ NO_PRED ] destination ; } class Prim extends Data { } abstract class Class { att String [ NO_PRED ] name ; att String [ NO_PRED ] name ; } NO_PRED Association NO_PRED U { val Class [ * ] elements ; } class Prim extends U { } Class [ * ] kind ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d class E { att String [ NO_PRED ] name ; val State [ + ] states ; val Transition [ * ] transition ; } class State { att String [ NO_PRED ] name ; val F [ * ] transition ; ref Transition [ NO_PRED ] outgoing ; } F [ NO_PRED ] f ; att class Transition { att String [ NO_PRED ] name ; att String [ NO_PRED ] action ; att State [ NO_PRED ] t ; } F [ NO_PRED ] f ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Library { ref String [ NO_PRED ] name ; val Member [ * ] members ; val Book [ * ] books ; } Film [ * ] films ; val class Book { att String [ NO_PRED ] name ; } Book [ * ] book ; } Book [ * ] film ; } class Book { ref String [ NO_PRED ] name ; ref NO_PRED Book { att String [ NO_PRED ] name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph class G NO_PRED val N NO_PRED * ] f ; } } F { } E NO_PRED * ] simulac ; } Act [ * ] fragment NO_PRED } String [ NO_PRED ] name ; } class E { att String [ NO_PRED ] n ; val int [ NO_PRED ] n NO_PRED att int [ NO_PRED ] n ; } Seg [ NO_PRED ] fragment ; } @
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity NO_PRED Root { B { B { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package t abstract Edge extends View { ref View [ 1 ] source ; ref View [ 1 ] target ; val Bend [ NO_PRED ] bend ; val Anch [ NO_PRED ] source ; val NO_PRED [ NO_PRED ] target ; att class Anch extends View { val Layout [ NO_PRED ] layout ; } abstract class Style { } class Fill extends Style { val int [ NO_PRED ] fill ; } int [ NO_PRED ] transparency ; } class Line extends Style { att int [ NO_PRED ] line ; att
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Family NO_PRED att String [ 1 ] last ; val Member [ 1 ] father ; val Member [ 1 ] mother ; val Member [ * ] sons ; val Member [ * ] daughters ; } abstract Member { att String [ 1 ] first ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; } int [ NO_PRED ] first ; } NO_PRED Group { ref NO_PRED Operation extends } NO_PRED Operation extends Member { att NO_PRED Female extends Member { } NO_PRED namespace ( ur = NO_PRED NO_PRED NO_PRED = NO_PRED ] NO_PRED values NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Model { val Ver [ * ] states ; val String [ NO_PRED ] diagram ; val class State { att String [ NO_PRED ] id ; att Transition [ * ] transitions ; } boolean [ 1 ] initial ; } class Transition { att State [ 1 ] state ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school class Class { } Class [ * ] classes ; } String [ NO_PRED ] name ; } class Class { att General [ * ] attributes ; } int [ NO_PRED ] name ; } NO_PRED Att { att String [ NO_PRED ] name ; att Att [ NO_PRED ] type ; } boolean [ NO_PRED ] type ; } class Prim { att String [ NO_PRED ] name ; } Prim [ NO_PRED ] abstract ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph class Resource { val String [ NO_PRED ] name ; val Resource [ * ] children ; } Resource [ NO_PRED ] parent ; att boolean [ NO_PRED ] exists ; ref boolean [ NO_PRED ] notes ; att boolean java [ NO_PRED ] persistent ; att String [ NO_PRED ] persistent ; att boolean [ NO_PRED ] local ; ref boolean java [ 1 ] arguments ; att String [ NO_PRED ] location ; att String [ NO_PRED ] name ; att String [ NO_PRED ] trace ; ref String [ NO_PRED ] name ; att class Provider NO_PRED att Resource NO_PRED * ] dynamic { att class Group NO_PRED Entity { val Resource [ 1 ] parent NO_PRED ref boolean [ * ] parent ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Foo { ref B [ * ] b ; } class B { att C [ NO_PRED ] e ; } A [ * ] p ; } class C { } L [ NO_PRED ] d ; ref E [ * ] NO_PRED ; } E [ * ] e ; } class D { val String [ NO_PRED ] key NO_PRED att String [ NO_PRED ] y ; } class E { att E NO_PRED NO_PRED ] e ; val String [ NO_PRED ] value ; } NO_PRED E { ref E NO_PRED NO_PRED ] value ; ref A [ * ] value ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph NO_PRED Model { } abstract Bar { } String [ 1 ] i ; att class C { att Foo [ NO_PRED ] n ; att int [ NO_PRED ] priv NO_PRED } class N { } E [ NO_PRED ] m ; att K [ * ] r ; } M [ * ] fo ; } int [ NO_PRED ] layer ; att class Q { ref T [ NO_PRED ] n ; att B [ NO_PRED ] o ; att int [ 1 ] y ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package university NO_PRED Book { att Person [ 1 ] author ; att String [ NO_PRED ] title ; } int [ Negro ] pages ; att Book [ NO_PRED ] category ; ref class Library { att Writer [ * ] writers ; val Book [ * ] books ; } String [ NO_PRED ] name ; } class Writer extends ref Book [ * ] books ; } String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Input { } B [ NO_PRED ] ref ; } B [ NO_PRED ] b ; ref Att [ NO_PRED ] s ; } D [ NO_PRED ] d ; } A [ NO_PRED ] s ; } D [ NO_PRED ] f ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED Build NO_PRED Root { } class E extends F { } T [ * ] ts ; val N [ * ] as ; } D [ * ] b ; } class T extends Named { } class Named extends Named { ref D [ NO_PRED ] to ; } class Named { att String [ NO_PRED ] name ; } class D extends Named NO_PRED } D [ * ] d ; } NO_PRED C extends Named { T { } D [ NO_PRED ] d ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types class Book { att String [ 1 ] title ; att int [ 1 ] pages ; att Book [ 1 ] category ; ref Writer [ 1 ] author ; } class Library { att java [ 1 ] name ; val Writer [ * ] writers ; val Book [ * ] books ; } class z { att java [ 1 ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class State { val String [ NO_PRED ] id ; val State [ NO_PRED ] owned ; val Obs [ NO_PRED ] events ; } Region [ NO_PRED ] states ; val NO_PRED State { att Variable [ * ] variables ; val class Node { att String [ NO_PRED ] name ; att class Event { val Variable [ * ] events ; } class Event { att String [ NO_PRED ] name ; } class State { att State [ * ] initial NO_PRED ref State [ * ] states ; } class State { att boolean [ NO_PRED ] name ; } Operation [ * ] transitions ; } class Transition { ref Event [ NO_PRED ] transition ; att Condition [ NO_PRED ] guard ; ref Event [ NO_PRED ] transition ; att NO_PRED Condition [ ref Event { * ] else NO_PRED } boolean [ NO_PRED ] expression NO_PRED } String [ NO_PRED ] condition ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class B NO_PRED att long [ NO_PRED ] id ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Region extends Abstract { att String [ 1 ] name ; val Abstract [ * ] ast ; } Foo [ * ] fo ; val abstract class Abstract { att String [ NO_PRED ] id ; } Foo [ * ] af ; } class Foo { att String [ NO_PRED ] zoo ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class E { val State State * ] owned ; ref State [ 1 ] initial ; } State [ + ] final ; } class State { Named { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] inc ; } State [ 1 ] my ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] input ; att String [ NO_PRED ] output ; } NO_PRED State NO_PRED F { } class State { att E [ * ] my ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Place { val Transition [ * ] nodes ; val Arc [ * ] arcs ; att abstract class Node { att class Place extends Node { att Token [ * ] tokens ; } class Arc extends Node { att class Arc { ref Node [ 1 ] source ; ref Node [ 1 ] target ; } class Input { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED class Named { att String [ 1 ] name ; } class class Count extends Named { } class Att extends Type { } class Entity extends Type { val boolean [ NO_PRED ] abstract ; val Feature [ * ] features ; att class Feature { val Type [ * ] types ; } class Feature extends Named { att Feature [ 1 ] kind ; ref Type [ 1 ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph class View { val List [ * ] list ; val abstract List { att String [ NO_PRED ] label ; att class List extends att Table [ * ] elements ; } class Table { val String [ NO_PRED ] name ; } String [ NO_PRED ] label ; } class Table { val Tree [ * ] elements ; } NO_PRED Tree { att String [ NO_PRED ] label ; } Tree NO_PRED * ] elements ; } class Tree { val Tree [ * ] elements ; val Select [ * ] list ; } Table { NO_PRED ] table ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph class class Named { ref String [ NO_PRED ] first ; att boolean [ 1 ] given ; att class Program extends Person { ref int [ * ] mat ; ref Course [ * ] attends ; ref class Person extends Person { ref int [ NO_PRED ] mat ; ref Course [ * ] lectures ; } class Course { att String [ 1 ] description ; att String [ + ] course ; att int [ 1 ] course ; att Student NO_PRED * ] courses ; ref Exam [ * ] exam ; ref class Exam { val Person [ * ] exam NO_PRED } Organisation [ * ] exam ; } NO_PRED Exam { att String [ 1 ] exam ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class A { } B [ NO_PRED ] some ; } class B { ref A [ NO_PRED ] a ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c NO_PRED namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p { } Root NO_PRED } class class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext class Run NO_PRED att Mission NO_PRED + ] task ; } class Task { att String [ NO_PRED ] name ; ref Group [ NO_PRED ] sensor ; val int NO_PRED * ] action ; val String [ NO_PRED ] is ; } class Sensor { val boolean [ NO_PRED ] name ; } class HD { } class Color NO_PRED Sensor { val Color [ NO_PRED ] color NO_PRED ref class Color extends Sensor { att Touch [ NO_PRED ] sensor ; } class Color extends Sensor { att Color [ NO_PRED ] operator ; att Color [ NO_PRED ] bulb ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r abstract A NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Person { val Course [ + ] study NO_PRED val String [ NO_PRED ] name ; att class Study { att String [ NO_PRED ] name ; att String [ NO_PRED ] fore ; att String [ NO_PRED ] likes ; } Department [ * ] relatives NO_PRED att person [ NO_PRED ] is ; } university [ 1 NO_PRED 2 ] parents ; att class university { att person [ + ] members ; att String [ NO_PRED ] name ; } NO_PRED University { att Course [ * ] is ; att String [ NO_PRED ] name ; val NO_PRED impoverished { att course [ NO_PRED ] contains ; ref person [ 1 ] contains ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Publication { Person { att Paper [ NO_PRED ] ev ; att class Publication extends ref St [ * ] children ; } Part [ * ] ev ; } class Publication { att NO_PRED class Compar { att class Publication extends Publication { att class Index extends Named { att class Sect extends Publication { val NO_PRED Scan extends Publication { } NO_PRED Slot { Named { val NO_PRED Key extends Publication { } NO_PRED In NO_PRED Publication { } NO_PRED Void extends Publication { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Graph { val Graph [ NO_PRED ] graph ; ref Graph [ NO_PRED ] graph ; val Element NO_PRED * ] element ; } String [ NO_PRED ] name ; } class class Element { ref Graph [ NO_PRED ] owner ; ref class Graph extends ref Edge [ NO_PRED ] edge ; ref Edge [ NO_PRED ] edge ; ref Node [ NO_PRED ] target ; } N [ NO_PRED ] source ; } class Edge extends Element { ref Node NO_PRED NO_PRED ] node ; ref Node NO_PRED NO_PRED ] node NO_PRED ref String [ NO_PRED ] label ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types class Stat NO_PRED att String [ NO_PRED additives name ; val chart [ * ] employees ; } Category [ * ] projects ; val class Employee { att String [ NO_PRED ] name ; att NO_PRED Project { att String [ NO_PRED ] name ; att boolean [ NO_PRED ] type ; } Employee [ * ] tasks ; } class Task { att String [ NO_PRED ] name ; att Employee [ NO_PRED ] manager ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Column extends R { ref String [ 1 ] name ; ref Table [ 1 ] owner ; } Foreign [ * ] foreign ; ref Table [ NO_PRED ] key ; } class Foreign extends R { ref Sche [ 1 ] refers ; att Table [ * ] column ; } Table [ 1 ] owner ; } class Sche extends R { ref Table [ 1 ] owner ; ref Column [ * ] column ; att @ class R { att String [ NO_PRED ] name ; } String [ NO_PRED ] type ; } class Sche extends R { val Table [ * ] tables ; } NO_PRED Table { R { val Column [ * ] tables ; ref Sche [ * ] table NO_PRED ref Column [ * ] tables ; val Column [ * ] foreign ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Test { Named { att B [ * ] b ; val C [ NO_PRED ] cs ; val O [ * ] w ; val L [ * ] ms ; } N [ * ] ns ; } class N extends Named { } abstract M extends Named { } N [ NO_PRED ] tob ; } J [ * ] d ; val abstract E extends A { } A [ * ] as ; } C [ * ] k ; } class M extends Named { } M [ NO_PRED ] c ; } class class Named { att String [ 1 ] name ; } abstract N extends Named { att class M extends Named { } M [ * ] k { } K [ NO_PRED ] a ; ref abstract M { M { } N [ inadvert ] a ; ref class M extends M { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class class Thing { ref abstract F extends F { val Port [ NO_PRED ] a ; ref F [ NO_PRED ] target ; att class Fault extends F { val NO_PRED State NO_PRED F { } String [ NO_PRED ] description ; att String [ NO_PRED ] description ; ref class class F extends Event { att String [ NO_PRED ] ect ; att class Failure extends Prob { } NO_PRED Double extends Event NO_PRED } class State extends Prob NO_PRED att class Transition extends Prob { } class class Conversion extends Event { } NO_PRED Input extends Gate { pointers class AND extends Gate { ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Trace { val Source [ * ] m ; } Prim [ * ] attribute ; val M [ * ] reference ; val class Class { att E [ 1 ] from ; ref E [ 1 ] image ; } class Class { att E [ 1 ] proto ; ref E [ 1 ] image ; } class Param { ref E [ 1 ] proto ; ref E [ 1 ] feature ; } Object [ 1 ] link ; att }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Persons class Library { att String [ 1 ] name ; val Book [ * ] books ; val Loan [ * ] loans ; val Member Relationship * ] members ; } class Book { att String [ 1 ] name ; att java [ 1 ] copies ; ref Library [ NO_PRED ] library ; } Loan [ * ] loans ; } class Member { att String [ 1 ] name ; ref Library [ NO_PRED ] library ; ref Loan [ * ] loans ; ref Book [ * ] books ; } class Loan { ref Book [ 1 ] book ; ref Member [ 1 ] member ; ref Date [ 1 ] date ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d class State { val String [ NO_PRED ] name ; val State [ * ] states ; ref Transition [ * ] transition ; } State [ 1 ] initial ; } class State { att String [ NO_PRED ] name ; } class Transition { att State [ 1 ] pre ; att State [ 1 ] state ; } class Initial extends State { } NO_PRED Final extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types class State NO_PRED Wired { val Autom [ 1 ] scenario ; att Autom [ 1 ] mod ; val
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Course { att Course [ * ] students ; } Course [ * NO_PRED 3 ] special ; val Sem [ * ] courses ; } int [ NO_PRED ] 10 ] special ; } int [ NO_PRED ] student ; } class Special { att String [ NO_PRED ] code ; att int [ NO_PRED ] name ; att int [ NO_PRED ] credits ; att String [ NO_PRED ] current ; val Grade [ * ] semester ; } class Special { att String [ NO_PRED ] year ; att Study NO_PRED * ] courses ; ref boolean [ 1 ] 5 ] courses NO_PRED att class Program NO_PRED att Course [ * ] parent ; } Course [ NO_PRED ] course ; ref Course [ * ] exam ; ref class Course ; att Course [ * ] course NO_PRED ref String [ NO_PRED ] student ; } University [ NO_PRED ] programme ; ref Sem [ NO_PRED ] student NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Graph { val String [ NO_PRED ] id ; att String [ NO_PRED ] name ; ref String [ NO_PRED ] color ; val Region [ * ] edges ; ref class Edge { val Color [ * NO_PRED 5 ] images ; } abstract Edge { att Ver [ 1 ] from ; att Edge [ NO_PRED ] weight ; ref Colors [ NO_PRED ] color ; } class Ver { Edge { } class Graph { att Graph [ * ] states ; val Graph [ * ] color ; } NO_PRED Color extends Edge { } Ver [ NO_PRED ] entry ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Item { att String [ NO_PRED ] product ; att int [ NO_PRED ] quantity ; att int [ NO_PRED ] u ; att Date [ NO_PRED ] comment ; att String [ NO_PRED ] ship ; att java [ NO_PRED ] part ; } class Purchase extends val NO_PRED Net { att java [ NO_PRED ] comment ; att java [ NO_PRED ] order ; att Item [ 1 ] bill ; val US [ NO_PRED ] ship ; } Import [ * ] items ; att class US { } String [ 1 ] name ; att String [ NO_PRED ] u ; att String [ 1 ] city ; att int [ NO_PRED ] city ; att String [ NO_PRED ] zip NO_PRED att String [ NO_PRED ] country ; att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Types { @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package subs NO_PRED class Sub { } String [ 1 ] bar NO_PRED } } Class { S { In { val class class Foo extends Baz NO_PRED } abstract NO_PRED Bar { } String [ NO_PRED ] name ; } } Data { } String [ NO_PRED ] a ; } My [ NO_PRED ] my ; } NO_PRED my { My { att String [ NO_PRED ] a ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a class Family { att Person [ * ] members ; } String [ 1 ] birth ; } Month [ NO_PRED ] total ; att abstract Person { att String [ NO_PRED ] weight ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d NO_PRED Abstract { Named { } class C extends C
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package min class Process { att String [ 1 ] name ; val Process [ * ] process ; } abstract class Process { ref Process [ 1 ] process ; } class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ 1 ] name ; } class Work extends Process { att Work [ 1 ] link ; ref Work [ 1 ] predecessor ; ref Work [ 1 ] successor ; } class Guid extends Process { ref Process [ 1 ] element ; } String [ NO_PRED ] text ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Stat { att State [ * ] owned ; ref State [ 1 ] initial ; ref State [ 1 ] states ; att State [ NO_PRED ] current ; att String [ NO_PRED ] name ; } class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] incoming ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] input ; att String [ NO_PRED ] output ; ref State [ * ] action ; } NO_PRED Input { att String [ NO_PRED ] input ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package domain class Type { } e [ * ] mixed ; att e [ * ] any ; att e [ * ] group ; } class Processing { att java [ NO_PRED ] data ; att java [ 1 ] target ; } class Simple { Any { att java [ 1 ] raw ; } java [ NO_PRED ] value ; } Obs [ 1 ] type ; } abstract Simple { att e [ * ] mixed ; val E [ * ] x NO_PRED val E [ * ] values NO_PRED val java NO_PRED * NO_PRED NO_PRED ] format NO_PRED val java NO_PRED * NO_PRED NO_PRED ] data [ val E NO_PRED * NO_PRED NO_PRED ] format NO_PRED val java NO_PRED * NO_PRED NO_PRED ] filename ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f abstract class Abstract { att String [ NO_PRED ] name ; att String [ 1 ] signature ; val Binding [ * ] bindings ; val class Binding { ref Interface [ NO_PRED ] from ; ref Interface [ NO_PRED ] to ; } class Content { att String [ 1 ] expression ; att String [ NO_PRED ] content ; val Component [ NO_PRED ] content NO_PRED } E [ * ] e ; } NO_PRED Required extends Interface { } class Provided extends Interface { } class Component { val Component [ * ] sub ; val Required [ * ] required ; } Provided [ * ] provided ; } Provided [ * ] content ; } String [ NO_PRED ] provided ; att NO_PRED Required { } String [ NO_PRED ] instance { } E extends NO_PRED ] instance [ } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package b class Module extends NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class A { att String [ 1 ] name ; } NO_PRED A extends att double [ NO_PRED ] double ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Foo { att Import [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class Book { att Book [ 1 ] books ; ref String [ 1 ] name ; att String [ 1 ] last ; } class Book { att Author [ * ] author ; att String [ NO_PRED ] title ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school NO_PRED A { } String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Person { att String [ 1 ] name ; val Department [ * ] employees ; att Company [ 1 ] size ; } class Employee { att String [ 1 ] name ; ref Employee [ NO_PRED ] manager ; ref Company [ 1 ] company ; ref Employee [ NO_PRED ] direct ; ref Employee [ * ] all ; ref Employee [ * ] reporting ; att boolean [ NO_PRED ] has ; } NO_PRED Bug extends att int [ NO_PRED ] Att ; att int [ NO_PRED ] Att ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity class Book { att String [ 1 ] title ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } Library [ 1 ] library ; } String [ NO_PRED ] bas NO_PRED att class Library { att String [ NO_PRED ] name ; att Writer [ * ] books ; } Writer [ * ] writers ; val String [ NO_PRED ] number ; } class Writer { att String [ NO_PRED ] name ; ref Book [ * ] books ; } Library [ * ] library ; } String [ 1 ] list ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f NO_PRED A { Named { } class B { ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a class Course { Named { val State [ * ] transitions ; val State [ * ] actions ; } class Transition extends att String [ 1 ] name ; val Stat [ * ] states ; } State [ 1 ] initial ; } class State extends att Region [ NO_PRED ] transitions ; } class State extends Ver { att Pse [ NO_PRED ] id ; } java NO_PRED 1 ] al ; } class Transition extends Region { att String [ NO_PRED ] name ; val } Composite extends Pse { val State [ + ] regions ; } class Transition { } String [ 1 ] pri ; val State [ 1 ] l ; att Ver [ 1 ] target ; } class Pse [ Transition { ref Ver [ 1 ] action { att class Pse [ } Action [ 1 ] de ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f abstract class Named { att String [ NO_PRED ] name ; } abstract Data extends Named { val Table [ * ] table ; } class Table extends Named { att Column [ + ] column ; val class Column extends Named { } String [ NO_PRED ] type ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet NO_PRED Program NO_PRED att Network [ 1 ] position ; } Point [ * ] NO_PRED ; } class Point { att String [ 1 ] x ; att int [ NO_PRED ] y ; } class class Instruction extends } class Lit extends Instruction { att class class Set extends Instruction { att int [ NO_PRED ] m ; att int [ NO_PRED ] mass ; } class Go extends Move { } class Left extends Move { } class Right extends Move { } class Disc extends Move { att class Pl extends Condition { } B [ NO_PRED ] instructions ; } class Wait extends Instruction { att Function [ * ] list ; val class Wait extends Instruction { att class Turn NO_PRED Instruction { } boolean [ NO_PRED ] repeat NO_PRED } Instruction [ NO_PRED ] reference ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity class Place NO_PRED Net { att Net [ 1 ] container ; ref Token [ * ] out ; val TP [ * ] in ; } TP [ * ] tokens ; } abstract Pet extends Named { ref PT [ 1 ] net ; ref PT [ + ] in ; ref TP [ * ] out ; ref class class Named extends ref int [ 1 ] weight ; ref class PT { att String [ NO_PRED ] name ; } NO_PRED Net extends val Transition [ * ] places ; val Transition [ * ] transitions ; } class Place extends Arc { ref Place [ NO_PRED ] place ; ref Ref [ 1 ] target ; ref NO_PRED Place extends Arc [ ref Transition [ 1 ] source ; ref Transition [ 1 ] target ; } NO_PRED Place ; } Net { 1 ] source ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Graph { att String [ NO_PRED ] name ; val int [ NO_PRED ] type ; val int [ NO_PRED ] size ; att NO_PRED Graph { ref Node [ * ] source ; ref Node [ 1 ] target ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type NO_PRED Package NO_PRED Class { att Att [ * ] attribute ; } class Att { att String [ NO_PRED ] name ; } Class [ 1 ] type ; } String [ NO_PRED ] is ; } Class NO_PRED NO_PRED ] type ; ref class Prim { att String [ NO_PRED ] name ; att class Prim extends Class { } class Prim { val Class [ * ] class ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package trace NO_PRED Association extends Property { } class Property { ref Property [ 2 ] end ; val Qual [ * ] qualifier ; } class Association { } Property [ * ] qualifier ; } class Extension extends Link { } class Lit extends Property { } class Property { ref Property [ 1 ] qualifier ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package g class State { att State NO_PRED * ] states ; att State [ 1 ] initial ; att class State { Named NO_PRED att String [ NO_PRED ] name ; val Super [ * ] action NO_PRED val Action [ NO_PRED ] entry ; } class Stead extends Super { } class Final extends State { ref class Final { att String [ NO_PRED ] name ; ref String [ NO_PRED ] Effect ; val State [ 1 ] src ; att State [ 1 ] source ; } State [ 1 ] l ; } NO_PRED Initial extends Super { } boolean [ NO_PRED ] Name ; att NO_PRED Super { att Super [ * ] transition NO_PRED } class Final { att String [ NO_PRED ] Condition NO_PRED att class Contin NO_PRED val boolean [ NO_PRED ] entry ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class DB { R { att java [ 1 ] u ; ref Table [ 1 ] owner ; ref Key [ * ] foreign ; } Key [ * ] refers ; } class Foreign extends R { ref Sche [ NO_PRED ] refers ; ref Column [ * ] column ; ref Table [ 1 ] owner ; } class Column extends R { ref Field [ 1 ] owner ; ref Column [ * ] column ; } NO_PRED class R { att String [ NO_PRED ] name ; } String [ NO_PRED ] comment ; } NO_PRED Conversion { R { val Table [ * ] tables ; } NO_PRED Table extends R { val Foreign [ * ] column ; ref Column [ * ] tables ; ref Column extends * ] primary ; } Column [ * ] parent ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet abstract Class { att String [ NO_PRED ] name ; } class Class NO_PRED Class NO_PRED att Class [ NO_PRED ] super ; val String [ 1 ] is ; att Att [ * ] att ; ref class Prim { att Class [ 1 ] type ; att String [ 1 ] name ; ref boolean [ 1 ] is ; } class Prim { ref Class NO_PRED 1 ] src ; ref String [ 1 ] name ; ref Class [ 1 ] dest seventeen } NO_PRED Att extends Class { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Sche { D { val Column [ * ] column ; val Foreign [ 1 ] primary ; val Foreign [ * ] foreign ; } Table [ 1 ] schema ; } String [ NO_PRED ] is NO_PRED } class Column extends Att { ref Table [ 1 ] table ; att Foreign [ NO_PRED ] key ; } String [ NO_PRED ] type ; } boolean [ NO_PRED ] null ; } String [ NO_PRED ] size ; } int [ NO_PRED ] precision ; } boolean [ NO_PRED ] storage ; att class Foreign { Table { val Table [ * ] tables ; val class Column extends Unique { ref Table [ Select ] table ; } Foreign [ NO_PRED ] primary { ref NO_PRED Foreign extends Column { ref Column [ * ] foreign extends } Column [ NO_PRED ] foreign extends } class class Column extends } String [ NO_PRED ] foreign NO_PRED att NO_PRED class Sche extends Name { } Column [ * ] foreign { } NO_PRED Primary extends Rel { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class CT { Named { att float [ 1 ] name ; } State [ * ] states ; val State [ * ] initial ; val class State extends ID { att String [ NO_PRED ] name ; att Transition [ * ] outgoing NO_PRED ref Transition [ * ] outgoing ; } Transition [ NO_PRED ] labels ; att int [ NO_PRED ] frequency ; att class Transition extends ID { att State [ 1 ] source ; ref State [ 1 ] to ; val float [ NO_PRED ] school NO_PRED att float [ NO_PRED ] cost ; att abstract Label extends IN { att String [ NO_PRED ] value ; att Transition [ NO_PRED ] type NO_PRED } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Persons NO_PRED Process extends Activity NO_PRED Element { val Branch [ * ] groups ; val Lane [ * ] lanes ; } boolean [ NO_PRED ] activity ; } int [ NO_PRED ] loop ; val Sub [ 1 ] event ; } abstract Artifact extends Class NO_PRED Document { val Association [ * ] associations ; val Art [ NO_PRED ] artifacts ; } class Association extends Artifact { val Artifact [ * ] artifacts ; } class Association extends Element
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Player { ref Re [ * ] multi ; } abstract MP { ref Player [ * ] player ; } NO_PRED
<s> @ namespace ( ur transcript NO_PRED NO_PRED prefix = NO_PRED ) package test class Net { val String [ NO_PRED ] name ; val Arc [ * ] nodes ; val Arc [ * ] arcs ; } abstract class Node { att String [ NO_PRED ] name ; } Arc [ * ] in ; ref Arc [ * ] out ; } class Transition { ref Node [ 1 ] source ; ref Node [ 1 ] target ; } abstract Transition extends Node { att Token [ * ] tokens ; } class Token extends Node { att NO_PRED Token { NO_PRED NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study class Missions NO_PRED } String [ + ] task ; val String [ NO_PRED ] last ; att Task NO_PRED * ] management ; att String [ NO_PRED ] mission ; val class Employee { att String [ NO_PRED ] first ; att En [ NO_PRED ] last ; att Employee [ NO_PRED ] NO_PRED ; ref NO_PRED COR { att String [ NO_PRED ] name ; att Employee [ NO_PRED ] address ; val class Occup { att String [ NO_PRED ] name ; att String [ NO_PRED ] city ; att String [ NO_PRED ] number ; att class Employee { att String [ NO_PRED ] status ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Book { att String [ NO_PRED ] shelf ; val Book [ * ] items ; } class class Item { } String [ NO_PRED ] name ; att int [ NO_PRED ] time ; att class Author NO_PRED Item { } int [ NO_PRED ] pages ; att class class Item extends Item { att int [ NO_PRED ] weight ; } class Library extends Item { att class HD extends multi { } NO_PRED Station NO_PRED District { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class Package NO_PRED Named { val String [ * ] owned ; val Class [ NO_PRED ] super ; } class Property extends Named { ref String [ 1 ] description ; ref Data [ NO_PRED ] complex ; ref boolean [ 1 ] is ; } class Association { ref String [ NO_PRED ] name ; } abstract Package extends Named { val Package [ * ] classes ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e abstract Catalog { val Writer [ * ] writers ; } class Writer { att String [ 1 ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Named extends } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Att extends Type NO_PRED att boolean [ 1 ] is ; val Type [ * ] super ; val class class Class { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Pet { val Transition [ * ] nodes ; att Arc [ * ] arcs ; } abstract class Node { att String [ 1 ] name ; } class Place extends Node { att int [ NO_PRED ] tokens ; ref class Transition extends Node { att NO_PRED class Arc { att NO_PRED Arc extends Arc { ref Transition [ 1 ] transition ; ref Place [ 1 ] output ; } class PT extends Arc { ref Place [ 1 ] expression ; ref Transition [ 1 ] output ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type class class Abstract { ref String [ * ] name ; att State [ NO_PRED ] parent ; } Transition [ * ] transitions ; } class State { Abstract NO_PRED } class Fin { Abstract { val Abstract [ 1 ] initial ; val Abstract [ * ] states ; } class Transition { att State [ NO_PRED ] from ; ref Abstract [ 1 ] target ; att String [ NO_PRED ] name ; } String [ NO_PRED ] trigger ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package my class Place extends ref Transition [ * ] nodes ; val Arc [ * ] arcs ; } String [ NO_PRED ] name ; } abstract class Node { } Integer [ 1 ] name ; } class Place extends Node { att int [ 1 ] tokens ; ref class Arc extends Node { att class Arc { ref Node [ 1 ] source ; ref Node [ 1 ] output ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package g class Families NO_PRED att String [ NO_PRED ] last ; att Member [ 1 ] father ; val Member [ 1 ] mother ; val Member [ * ] sons ; val Member [ * ] daughters ; att abstract Member { att String [ 1 ] first ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED Net { val Place [ * ] places ; val Transition [ * ] transitions ; } abstract Place { att int [ NO_PRED ] name ; ref class Transition { ref Place [ 1 ] input ; ref Place [ + ] output ; att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Author { att String [ NO_PRED ] name ; ref Book [ * ] books ; } class Book { att int [ NO_PRED ] title ; ref Author [ * ] author ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r class Class { Record { } int [ NO_PRED ] first ; } class University extends Named { val User [ NO_PRED ] parents ; } class class Named { att String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Web { val Hyper [ + ] hyper ; val Content [ 1 ] content ; att String [ 1 ] name ; } class Hyper { val Page [ + ] pages ; att Page [ 1 ] home ; } class Content { val En [ 1 ] classes ; } class Class extends att Att [ + ] attributes ; } Data [ 1 ] representative ; } String [ NO_PRED ] name ; } class Att { att String [ 1 ] name ; att SW [ 1 ] type ; } class class Att { val String [ 1 ] title ; ref Page [ 1 ] links ; ref abstract Link [ Page NO_PRED att String [ NO_PRED ] index ; att class Details NO_PRED Dynamic { } class Dynamic { Dynamic { } Dynamic { 1 ] return { ref class Link extends Dynamic { } class Image { } Dynamic [ 1 ] displayed NO_PRED ref class Index NO_PRED Page { att abstract Static { Page { att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d { abstract Any extends NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class H { ref H [ NO_PRED ] target ; val H [ * ] children ; att String [ 1 ] h ; att String [ 1 ] name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Book { val AT [ * ] tokens ; att AT [ * ] structures ; att String [ 1 ] corpus ; } AT [ * ] edges ; } abstract AT extends AT { ref AT [ * ] next ; att AT [ NO_PRED ] previous ; ref String [ NO_PRED ] text ; } AT [ NO_PRED ] graph ; } NO_PRED class AT extends AT { ref AT [ * ] targeted ; att abstract class AT { val } AT { A { ref AT [ NO_PRED ] graph ; val abstract AT extends ref AT [ 1 ] graph ; ref AT [ + ] parent NO_PRED ref AT [ 1 ] target Edge ref NO_PRED AT extends ref AT [ 1 ] target ; ref AT [ 1 ] source NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Tree { val Tree [ * ] children ; att Tree [ NO_PRED ] parent ; att String [ NO_PRED ] label ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library @
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Model { Super { } B [ NO_PRED ] ref ; val C [ * ] es ; } class B extends Named { val J [ * ] cs ; } class C extends Named { val class E { att String [ NO_PRED ] name ; } class E extends Named { } L [ * ] fs ; val class F extends Named { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f abstract Model extends Type NO_PRED val Property [ * ] super ; ref General [ * ] attributes ; att Type [ * ] ass ; ref Association [ * ] destination ; val abstract Att { U { ref Class [ 1 ] type ; } class Association extends Type { } Class [ 1 ] featuring ; ref Class [ * ] general ; } abstract Association extends Class { val abstract En { } String [ NO_PRED ] name ; } NO_PRED Class extends Named { val NO_PRED Class extends Named { ref Class [ 1 ] Class ; ref Class [ NO_PRED ] source ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree class Class NO_PRED S NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Region { val State [ 1 ] initial NO_PRED ref State [ NO_PRED ] f NO_PRED att class State { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph NO_PRED class { att String [ NO_PRED ] id ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Module NO_PRED att Expression NO_PRED 1 ] expression ; } abstract Assignment { } class Test extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Num extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Mul NO_PRED Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Div extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Number extends Expression { att int [ NO_PRED ] value ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r class Super { } Class [ NO_PRED ] some ; } abstract Sub extends Super { ref class Test { val Super [ NO_PRED ] specialization NO_PRED } NO_PRED Sub { } Super [ NO_PRED ] Sub ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package my NO_PRED L { att Type NO_PRED * ] states ; ref State [ 1 ] initial ; att State [ + ] final ; val State [ NO_PRED ] final ; } boolean [ NO_PRED ] name ; } class State { ref L [ 1 ] initial ; ref String [ NO_PRED ] name ; } Transition [ * ] outgoing ; ref Transition [ * ] incoming ; } class Final { ref State [ NO_PRED ] exams ; ref State [ NO_PRED ] target ; } String [ NO_PRED ] name NO_PRED att String [ NO_PRED ] output ; att NO_PRED State { val Prim [ * ] object ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a class Employee { att int [ NO_PRED ] first ; att class Company { att String [ NO_PRED ] number NO_PRED val Employee [ * NO_PRED 5 ] employees ; val Employee [ NO_PRED ] manager ; } class Company { val String [ NO_PRED ] name ; val Department [ * NO_PRED NO_PRED ] departments ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U abstract class Persons { att String [ 1 ] full ; } Persons [ 1 ] model ; } class Male extends Person { } int [ 1 ] age ; } class Female extends Person { att int [ NO_PRED ] age ; } class Persons { val Person [ * ] persons ; } @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Prim NO_PRED
<s> chats namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package research class Res { Named { val int [ 1 ] id ; val Foo [ 1 ] from ; att Named [ + ] properties NO_PRED } abstract class Named { att String [ NO_PRED ] name ; } Comment [ * ] comments ; } class And extends Named { } Thing [ NO_PRED ] thing ; ref int [ NO_PRED ] since ; val String [ NO_PRED ] place ; val class Type extends att String [ NO_PRED ] description ; } NO_PRED
<s> @ namespace ( ur synergy NO_PRED NO_PRED prefix = NO_PRED ) package b class Catalog { val String [ 1 ] name ; val Book [ * ] books ; ref Author [ + ] authors ; } class Book { att String [ NO_PRED ] name ; } Publisher [ * ] chapters ; } Author [ * ] author ; ref boolean [ NO_PRED ] author ; } class Chapter { att String [ NO_PRED ] title ; att Book [ * ] book ; att NO_PRED Person { att Book [ * ] is ; ref String [ NO_PRED ] name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph class Smart { val Person [ * ] tables ; } abstract Table { att String [ NO_PRED ] title ; val Column [ * ] column ; val Foreign [ NO_PRED ] primary ; } Foreign [ * ] foreign ; val class Column { att String [ NO_PRED ] name ; val Data [ NO_PRED ] table ; } class Foreign { att Column [ * ] members ; ref class Foreign { ref Column [ * ] col ; ref Table [ 1 ] table ; } Column [ * ] many ; } class
<s> @ namespace ( ur = imagination NO_PRED prefix = NO_PRED ) package Pet abstract class Named { att String [ 1 ] name ; } class class Class extends Named { } class Data extends Class { } class Class extends Class { att Class [ * ] super ; val Att [ * ] att ; att boolean [ 1 ] is ; } class Att extends Named { att boolean [ 1 ] multi ; ref Class [ 1 ] type ; ref Class NO_PRED 1 ] owner ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Trace { val String [ NO_PRED ] name ; val String [ * ] t ; att String [ NO_PRED ] my ; } int [ NO_PRED ] my ; ref String [ NO_PRED ] my ; ref Debug [ * ] nested ; val int [ NO_PRED ] my ; } Debug [ 1 ] associations ; } int [ NO_PRED ] strict ; } class Debug { att String [ NO_PRED ] label ; att int [ NO_PRED ] offset ; att int [ NO_PRED ] offset ; } int [ NO_PRED ] precision ; att int [ NO_PRED ] pos ; att int [ NO_PRED ] my NO_PRED att int [ NO_PRED ] my ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met class class Select { att String [ 1 ] name ; } class Select NO_PRED val A [ * ] f ; } class F { F { att Element NO_PRED NO_PRED ] selections ; } class New { val Column NO_PRED NO_PRED ] from ; val Join [ 1 ] where ; } } From extends val Element [ * ] tab ; } abstract Tab { val Column [ 1 ] join ; } abstract Join { Column { } String [ NO_PRED ] name ; att class Join { att Column [ 1 ] op NO_PRED val Join NO_PRED * ] oper NO_PRED val class Op { att String [ 1 ] class { att String [ NO_PRED ] column NO_PRED } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple NO_PRED Type { att e [ * ] any ; } e [ * ] any ; att e [ * ] any ; } class Association { att java [ 1 ] data ; att java [ 1 ] target ; } class Simple extends Any { att java [ NO_PRED ] raw ; } java [ NO_PRED ] value ; att Basic [ 1 ] type ; } class Mark { att e [ * ] mixed ; val E [ * ] values NO_PRED val E [ * ] x ; val e NO_PRED * NO_PRED NO_PRED ] annotations NO_PRED val java NO_PRED * NO_PRED NO_PRED ] data [ val E NO_PRED * NO_PRED NO_PRED ] declaration NO_PRED val java NO_PRED * NO_PRED NO_PRED ] format NO_PRED val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class State { Region { val class Transition extends State { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test @ A { val A [ NO_PRED ] package ; val class Variable { att String [ NO_PRED ] name ; val An [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class F { val State [ * ] states ; ref Transition [ * ] transitions ; } class State { att String [ 1 ] name ; att State [ * ] outgoing ; ref Transition [ * ] out ; } class Transition { ref String [ NO_PRED ] duration ; ref State [ 1 ] target ; ref State [ NO_PRED ] t ; att NO_PRED Initial extends State { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Book { att String [ 1 ] is ; att int [ 1 ] pages ; att Book [ 1 ] category ; ref Writer [ 1 ] author ; } int [ NO_PRED ] in ; } class Library { att java [ 1 ] name ; val Writer [ * ] writers ; val Book [ * ] books ; } class Writer { att java [ 1 ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Feature { val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Model { val translation [ * ] greet ; } class Type { att String [ NO_PRED ] name ; } class Type NO_PRED Abstract { att class Type extends H { ref G [ NO_PRED ] other ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Class { val String [ NO_PRED ] diagram ; val Class [ * ] categories ; ref abstract Class { att String [ NO_PRED ] name ; val Att [ * ] attributes ; } Method [ * ] references ; } Association [ NO_PRED ] diagram ; } Rel [ * ] source ; } class Att { att String [ NO_PRED ] name ; att String [ NO_PRED ] type ; att Class [ NO_PRED ] owner ; } class Reference { att String [ NO_PRED ] name ; att Class NO_PRED 1 ] type ; } Att NO_PRED 1 ] cl ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f abstract R { R { ref Column [ + ] col ; ref F [ * ] foreign ; val Key [ * ] key ; val Column [ 1 ] schema ; } class Column extends R profit ref Type [ 1 ] type ; att Table [ 1 ] owner ; } Table [ * ] refers ; } Foreign [ * ] foreign ; } class Foreign extends R { ref Table [ 1 ] column ; ref Sche [ 1 ] owner ; } } Foreign extends R { ref Sche [ * ] parent ; ref Table [ * ] refers ; ref Table [ * ] ref ; ref NO_PRED Table { } String [ NO_PRED ] name [ att String [ 1 ] name ; } NO_PRED Sche NO_PRED R { att Amid NO_PRED 1 ] _ ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o class Person { val Person [ + ] members ; } class Person { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types class Wh { val Program [ * ] elements ; } class Program { att String [ NO_PRED ] name ; val Condition [ NO_PRED ] definition ; } class Definition extends val Input [ NO_PRED ] initial ; val Command [ NO_PRED ] commands NO_PRED val Output [ NO_PRED ] output ; } class Input { att String [ * ] name ; } class Output { att String [ * ] v ; } class Commands { val Command [ * ] commands ; } class Command { } E [ NO_PRED ] commands ; } class Fore NO_PRED att String [ NO_PRED ] n ; } class Commands { val String [ * ] v ; val String [ * ] v ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Course { att String [ 1 ] room ; val Student [ * ] students ; val class Di { val School [ NO_PRED ] school ; } class School { att Class [ * ] classrooms ; } String [ NO_PRED ] name ; } abstract Student { att String [ NO_PRED ] name ; ref Student [ * ] friends ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f NO_PRED class COR { att java [ NO_PRED ] name ; } class class Node extends Named { } class Data extends Type { } class Complex extends Type { att boolean [ NO_PRED ] abstract ; } Att [ + ] features ; } class Feature extends val Type [ * ] types ; val NO_PRED Feature extends Named { att Feature [ 1 ] kind ; val Type [ 1 ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity NO_PRED Model { Model NO_PRED val B [ NO_PRED ] ref ; } C [ * ] e ; } C [ * ] k ; val class B extends Named { } D [ * ] cs ; } A [ * ] f ; ref abstract M extends Named { val F [ * ] h ; } N [ NO_PRED ] k ; } class D { att String [ NO_PRED ] name ; } class D extends Named { } L [ * ] fs ; } G [ * ] w ; val class F extends Named { } H [ * ] ms ; } class M extends Named { } class M extends Named { att NO_PRED M extends M { } class M extends Named { } E [ NO_PRED ] m ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r class Field { val Table [ * ] table ; } abstract Table { att String [ NO_PRED ] title ; val Column [ * ] columns ; val Foreign [ * ] primary ; } Foreign [ * ] foreign ; } abstract Column { att String [ NO_PRED ] name ; val String [ NO_PRED ] type ; att boolean [ NO_PRED ] default NO_PRED att NO_PRED Foreign { att Column [ 1 ] p ; } abstract Foreign { ref Column [ * ] columns ; ref Foreign [ NO_PRED ] table ; att Column [ * ] table ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class A { val B [ * ] el ; att String [ NO_PRED ] name ; } class B { val A [ * ] el ; att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o class Model { att String [ 1 ] some ; } java [ 1 ] value ; } double [ 1 ] lambda ; att B [ NO_PRED ] dest ; } NO_PRED B { att java [ 1 ] name ; } NO_PRED C { att NO_PRED D NO_PRED att java [ 1 ] name ; } D [ + ] the ; } E [ * ] some ; } java [ 1 ] description ; } int [ 1 ] mixed NO_PRED } java [ * ] any NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree NO_PRED Deter { NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Pattern extends Arrow NO_PRED B { val int [ NO_PRED ] since ; val class Thing extends Target NO_PRED Named { att Date [ NO_PRED ] step ; } abstract Trace extends Arrow { Adapt { ref Thing [ NO_PRED ] thing ; ref Thing [ NO_PRED ] thing ; } class Arrow extends Thing { val Thing [ * ] things ; val Thing [ * ] things ; val Thoughts [ * ] relations ; val abstract class Source { } } class Arrow { att Source [ NO_PRED ] target ; ref Target [ 1 ] source ; ref NO_PRED class Category { att Source [ NO_PRED ] sources ; } Source { * ] sources ; } String [ NO_PRED ] source NO_PRED } Source [ NO_PRED ] targets ; } NO_PRED class Target NO_PRED att class Source { att String [ * ] source ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat class H NO_PRED Abstract { ref Action [ * ] regions ; ref class Abstract extends Named { val Abstract [ 1 ] initial ; val Abstract [ * ] owned NO_PRED val abstract Abstract extends Abstract { ref State [ * ] incoming ; ref Transition [ * ] outgoing ; ref Region [ 1 ] owner ; } abstract State extends Named { ref State [ 1 ] source ; ref Abstract [ 1 ] source ; } abstract State { att String [ NO_PRED ] name ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED class Unit { ref Unit NO_PRED NO_PRED ] unit ; att DOI class Unit { att abstract Base extends Unit { } String NO_PRED 1 ] symbol ; } class Unit { val Base [ * ] units ; } abstract Unit extends Unit { val Unit [ NO_PRED ] units ; } class Unit extends Unit { val Unit [ 1 ] unit ; att int [ 1 ] exponent ; } class Unit extends Unit { val Unit [ 1 ] unit ; val Unit [ 1 ] denomin ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Order { att String [ 1 ] name ; val Import [ NO_PRED ] content ; val Required [ * ] required ; val Provided [ * ] provided ; val Binding [ * ] bindings ; } Binding [ NO_PRED ] sub ; } class class Interface { ref String [ 1 ] name ; } String [ NO_PRED ] signature ; val class Binding { att Required [ NO_PRED ] source ; ref String [ 1 ] name ; ref Binding [ * ] attributes ; } Required [ NO_PRED ] from ; } class Required { } Required [ 1 ] content ; } String [ 1 ] condition ; att String [ 1 ] expression ; } class Required { Interface { att class Binding { Interface { } Required NO_PRED NO_PRED ] to ; } Required [ NO_PRED ] to NO_PRED } class Binding { } String [ * ] required [ } String [ NO_PRED ] value extends } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class class E { } abstract ER { E { att Event NO_PRED * ] entities ; } R [ * ] rel ; val class Entity extends E { val String [ 1 ] name ; val ERA NO_PRED * ] attributes ; ref E [ * ] ends ; val E [ 1 ] schema ; } class R NO_PRED E { att String [ 1 ] name ; ref ERA [ * ] attributes ; ref R [ 2 NO_PRED * ] ends ; } R [ 1 ] rel ; } class R extends E { ref String [ 1 ] name ; att R NO_PRED 1 ] rel ; att R [ 1 ] target NO_PRED ref class R { E NO_PRED att String [ 1 ] type ; att R [ 1 ] type NO_PRED att E NO_PRED 1 ] entity NO_PRED ref String [ 1 ] ref NO_PRED ref abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met NO_PRED Model { att Import [ * ] networks ; val Actor [ * ] functions ; val Model [ * ] equip ; val Service NO_PRED * ] metrics ; val Met [ * ] protocols ; val Objective [ * ] protocols ; val M [ * ] units ; val Anat [ * ] toler ; val Expression [ * ] expressions ; val Unit [ * ] users ; val Project [ * ] rooms ; } Equipment [ * ] countries ; val T [ * ] site ; val Met [ * ] units ; att Function [ * ] service ; ref Service NO_PRED * ] versions ; val Plugin [ * ] metadata ; } String [ NO_PRED ] url ; att java [ 1 ] name ; } java [ NO_PRED ] url ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class Block { val B [ * ] el ; val C [ * ] c ; att String [ 1 ] name NO_PRED } class B { att String [ NO_PRED ] name ; } CD [ NO_PRED ] description ; val B [ NO_PRED ] description ; } B [ NO_PRED ] description ; } class B { att String [ NO_PRED ] description ; } class B { att String [ NO_PRED ] description ; } NO_PRED B { att String [ NO_PRED ] description ; } NO_PRED D { att String [ NO_PRED ] description ; } Description NO_PRED NO_PRED ] description NO_PRED att NO_PRED CD { att String [ NO_PRED ] description ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package research class State { val State [ * ] states ; val Transition [ * ] transitions ; } class State { att String [ 1 ] name ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library abstract Class { Ref { val Class NO_PRED * ] classes ; att abstract Class extends Named { val Att [ * ] Att ; val Method [ * ] methods ; att boolean NO_PRED NO_PRED ] visibility ; val abstract class Named { att String [ NO_PRED ] Name ; } abstract Att extends Named { ref E [ NO_PRED ] type ; att Agg [ NO_PRED ] visibility ; } Class [ 1 ] owner ; } class Association extends Named { ref EV [ NO_PRED ] return ; ref Param [ * ] Param ; ref E [ NO_PRED ] return ; ref Class [ 1 ] Return ; ref class Param { Named { ref boolean [ * ] Return { ref Att [ NO_PRED ] return ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package m NO_PRED C { val Declaration [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study class Class { val Class [ NO_PRED ] t ; val class class Named { } String [ NO_PRED ] name ; } class Dat extends Type { } class Class extends Type { val Att [ * ] attributes ; } class Real { att automatically [ NO_PRED ] name ; } String [ NO_PRED ] type ; } Type [ NO_PRED ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package research abstract class Named { att String [ 1 ] name ; } class Database { val Database [ * ] contents ; } abstract class Database extends Named { } Database [ NO_PRED ] database ; } class Table extends Database { val Column [ * ] columns ; ref Column [ * ] primary ; att class Column extends Database { ref Table [ NO_PRED ] table ; att String [ NO_PRED ] type ; att NO_PRED Foreign extends Database { ref Column [ NO_PRED ] parent ; ref Column [ NO_PRED ] child ; att String [ NO_PRED ] is ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Book { att String [ 1 ] title ; att int [ 1 ] pages ; att Book [ 1 ] category ; ref Writer [ 1 ] author ; } class Library { att java [ 1 ] name ; val java [ * ] site ; val Writer [ * ] writers ; val Book [ * ] books ; att class Writer { att java [ 1 ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Process { att String [ 1 ] name ; val Process [ * ] process ; } class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ 1 ] name ; } All [ * ] allocations ; } class Work extends Process { att Work [ 1 ] link ; ref Work [ 1 ] predecessor ; ref Work [ 1 ] successor ; } abstract class Process { } Process [ 1 ] element ; } class Guid extends Process { att String [ 1 ] text ; } Process [ NO_PRED ] text ; } class R [ Process { } String [ NO_PRED ] text ; att String [ NO_PRED ] text ; } class R { } R NO_PRED NO_PRED ] parent { ref int [ 1 ] weight NO_PRED att R [ NO_PRED ] resource ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o NO_PRED Collection { } e [ * ] mixed ; att e [ * ] group ; att e [ * ] any ; } class Processing { att java [ NO_PRED ] data ; att java [ 1 ] target ; val class Simple extends Any { att java [ NO_PRED ] raw ; val java [ NO_PRED ] value ; att No [ 1 ] type ; } class Simple { att e [ * ] values ; val E [ * ] x NO_PRED val E [ * ] x NO_PRED val e NO_PRED * NO_PRED NO_PRED ] format ; val e NO_PRED * NO_PRED * ] the [ val E NO_PRED 0 NO_PRED NO_PRED ] format NO_PRED val java NO_PRED 0 NO_PRED NO_PRED ] o ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U @ Child { S { } class S { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o class Model { val E [ * ] entities ; } class Entity { att String [ NO_PRED ] name ; ref Entity [ * ] super ; val Att [ * ] attributes ; } class Att { val Att [ NO_PRED ] type ; att String [ NO_PRED ] name ; } class Att { val Element [ NO_PRED ] element ; att String [ NO_PRED ] array ; att boolean [ NO_PRED ] length ; } class Element { } class Basic extends Element { } String [ NO_PRED ] type ; } class Basic extends Element { ref Entity [ NO_PRED ] entity NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c class F { val State [ NO_PRED ] states ; } Transition [ * ] transitions ; } State [ 1 ] initial ; att class State { att String [ 1 ] name ; } F [ 1 ] f ; ref class Transition extends State { } NO_PRED Transition { att State [ 1 ] source ; ref State [ 1 ] output ; ref F [ 1 ] f ; att String [ NO_PRED ] event ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class System { Named { ref B [ * ] b ; val C [ * ] e ; } A [ * ] ac ; } D [ * ] ag ; val H [ * ] a ; } abstract B extends Named { ref N [ 1 ] cs ; } M [ * ] g ; } class C extends Named { } class Named { att String [ NO_PRED ] name ; } class E extends Named { } F [ * ] fs ; } class F extends Named { } NO_PRED G extends Named { } H [ NO_PRED ] h ; } NO_PRED H extends Named { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Location extends att java [ NO_PRED ] key ; att java [ NO_PRED ] email ; val String [ NO_PRED ] phone ; val Gender [ NO_PRED ] number ; att String [ 1 ] city ; ref int [ 1 ] state ; att String [ NO_PRED ] country ; att String [ 1 ] country ; att boolean [ 1 ] sales ; att double [ 1 ] latitude ; } double [ 1 ] altitude ; } int [ NO_PRED ] altitude ; } boolean [ 1 ] primary ; att Address [ * ] areas ; att class Area { val String [ * ] name ; att String [ 1 ] type ; att java [ 1 ] boundary ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Pet { val Transition [ * ] transition ; val Arc [ * ] arc ; val Arc [ * ] arc ; val Place [ * ] place ; att String [ NO_PRED ] name ; } class Transition { att String [ NO_PRED ] name ; ref Arc [ * ] pre ; ref Arc [ * ] post ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] transition ; ref Place [ NO_PRED ] place ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] place ; ref Transition [ NO_PRED ] transition ; ref NO_PRED Arc { att String [ NO_PRED ] place ; } Arc { NO_PRED ] transition ; ref String [ NO_PRED ] token ; } Arc [ NO_PRED ] pre NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Company { att String [ 1 ] name ; val Department [ * ] employees ; att Company [ 1 ] size ; } class Employee { att String [ 1 ] name ; ref Employee [ NO_PRED ] manager ; ref Company [ 1 ] company ; ref Employee [ * ] direct ; ref Employee [ * ] all ; ref Employee [ * ] reporting ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class class Expression { } abstract class Type extends Operation { val java [ 1 ] name ; } class Collection extends Operator { } O [ 1 ] source ; val O [ 1 ] source ; } class If extends Operator { } O [ 1 ] source ; att class class Property extends O { } class Collection extends Prim { att String [ 1 ] string ; } class Boolean extends Prim { att boolean NO_PRED 1 ] boolean ; } abstract class N extends Prim { } abstract Real { Prim { } boolean [ 1 ] unit ; } class Integer ; N { } int NO_PRED 1 ] integer ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract Place { Ident NO_PRED att class Place extends Node { val Token [ * ] token ; ref class Transition { Ident { } NO_PRED Transition extends Pet { ref Arc [ NO_PRED ] left ; } abstract Arc extends Pet { ref Place [ NO_PRED ] source ; ref Pet [ NO_PRED ] pet ; } NO_PRED Arc { att String [ NO_PRED ] name ; } String [ NO_PRED ] pet ; ref Pet [ NO_PRED ] pet ; val NO_PRED Node { Pet { ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar abstract Pet { val Place [ * ] places ; val Transition [ * ] transitions ; } String [ NO_PRED ] name ; } class Place { att String [ 1 ] tokens ; att String [ 1 ] name ; } class Transition { att Place [ + ] input ; ref Place [ + ] output ; att String [ 1 ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar class Nu { val String [ NO_PRED ] name ; } Associ [ * ] departments ; val int [ NO_PRED ] Mean ; att class Department { att String [ NO_PRED ] name ; att Employee [ * ] employees ; val Department [ * ] employees ; } Department [ * ] sub ; att boolean [ NO_PRED ] budget ; } class Employee { att String [ NO_PRED ] name ; } int [ NO_PRED ] description ; } String [ NO_PRED ] salary ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph NO_PRED Base { att boolean [ NO_PRED ] name ; } class Unit { val Base [ * ] units ; } class class Unit NO_PRED } abstract Base extends Unit { val Unit [ + ] units ; } class Unit extends Unit { val Unit [ 1 ] unit ; att int [ 1 ] exponent ; } class Unit extends Unit { ref Base [ 1 ] base ; } class class Unit { ref Unit [ NO_PRED ] unit ; } String [ 1 ] unit ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met class Shape NO_PRED att
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Order { att String [ NO_PRED ] comment ; att java [ NO_PRED ] order ; att Item [ * ] bill ; val US [ 1 ] bill ; val Item [ * ] items ; val abstract Item { att String [ NO_PRED ] product ; att int [ NO_PRED ] quantity ; ref int [ NO_PRED ] US ; att String [ NO_PRED ] comment ; att Date [ NO_PRED ] start ; val java [ NO_PRED ] part ; att class US { att String [ NO_PRED ] name ; att String [ NO_PRED ] street ; att String [ NO_PRED ] zip ; att String [ NO_PRED ] country ; att String [ NO_PRED ] country NO_PRED att String [ NO_PRED ] country NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree class Process { att String [ 1 ] name ; val int [ 1 ] min ; att int [ 1 ] max ; val Process [ * ] process ; ref class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ 1 ] name ; } int [ 1 ] min ; att int [ 1 ] max ; ref R [ * ] res ; ref class Work extends Process { att Work [ 1 ] link ; ref R [ 1 ] link NO_PRED ref R [ 1 ] successor ; ref class class Process [ ref class R extends Process { ref R [ * ] inner ; } String [ 1 ] value ; } NO_PRED R ; Process { ref String [ 1 ] text ; } String [ * ] text ; ref class R { Process NO_PRED } R ; * ] text ; ref R [ NO_PRED ] text NO_PRED } String [ 1 ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Component { } Port [ * ] ports ; ref class class Port { } class Forward { ref Port [ NO_PRED ] in ; ref Port [ * ] out ; } NO_PRED In extends Port { ref abstract Out extends Port { } class Port extends Port { } In [ NO_PRED ] type ; ref class Typ extends Port { } Out [ NO_PRED ] type ; } class Component { ref Component [ * ] in ; val Component [ NO_PRED ] type ; } class Execution { ref class Required extends ref Port [ NO_PRED ] in ; val Connection [ * ] out ; ref Port [ NO_PRED ] type ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Company extends att String [ NO_PRED ] name ; ref class Company { val Employee [ * ] employees ; val Employee [ * ] manager ; } int [ NO_PRED ] budget NO_PRED } class Employee NO_PRED att String [ NO_PRED ] name ; val Department [ * ] departments ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package m class Pet { att Net [ 1 ] net ; ref Transition [ * ] src ; ref TP [ * ] in ; } abstract Transition { ref Net [ 1 ] net ; ref PT [ + ] in ; ref TP [ + ] out ; } abstract Net { val Place [ 1 ] place ; val TP [ + ] transition ; ref NO_PRED class Arc { ref class PT extends Arc { ref Transition [ 1 ] src NO_PRED ref Place [ 1 ] src ; } class TP extends Arc { ref Transition [ 1 ] src ; ref Place [ 1 ] dst ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Families { val Family [ * ] families ; val class Family { att Family [ * ] father ; ref Family [ NO_PRED ] mother ; val Family [ * ] sons ; val Family [ * ] daughters ; val String [ NO_PRED ] name ; att Family [ NO_PRED ] families ; } Family NO_PRED NO_PRED NO_PRED 5 ] all ; } class Family { att String [ NO_PRED ] name ; att Family [ NO_PRED ] family ; ref Family [ NO_PRED ] mother ; } Family [ NO_PRED ] sons ; ref Family [ NO_PRED ] daughters ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class Process { att String [ 1 ] name ; val Process [ * ] process ; } class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ 1 ] name ; att R [ NO_PRED ] res ; } class Work extends Process { att Work [ 1 ] link ; ref R [ 1 ] predecessor ; ref R [ 1 ] successor ; } abstract class R { att R NO_PRED 1 ] element ; } class R extends Process { } Process [ * ] element ; } String [ NO_PRED ] text ; } NO_PRED R NO_PRED Process [ } String [ 1 ] text ; att String [ NO_PRED ] text NO_PRED } class R NO_PRED Process { ref R [ 1 ] value ; } String [ 1 ] value { att R NO_PRED 1 ] value NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Super { val Super [ * ] packages ; val Con [ * ] primitive ; val Operation [ * ] packages ; val abstract Param { } java [ NO_PRED ] name ; } Import [ + ] classes ; val class class Class { Super { att Property [ * ] attributes ; val class Prim { att String [ NO_PRED ] name ; att Type [ NO_PRED ] type ; att boolean [ NO_PRED ] visibility ; } An [ * ] annotations ; } class class Type { att String [ NO_PRED ] name ; } class Typ extends Type { } class Tag { att String [ NO_PRED ] declaration NO_PRED att String [ 1 ] name NO_PRED ref NO_PRED Prim extends Type { att An NO_PRED NO_PRED ] type NO_PRED } String [ NO_PRED ] ur NO_PRED att class Param NO_PRED Type [ val class Type [ Type { val Type [ NO_PRED ] Type ; att class Entity [ Class NO_PRED val Class [ * ] value NO_PRED val Type [ * ] entity NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED Extension extends Association { } class Behavior extends Property { } class Extension extends Class { } class Extension extends Property { } class Property { val Property [ 2 NO_PRED * ] member ; } NO_PRED Communication { att Agg [ NO_PRED ] aggregation ; } NO_PRED Communication { Association { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Book { att String [ NO_PRED ] title ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } boolean [ NO_PRED ] damaged ; } class Library { att String [ NO_PRED ] name ; val Writer [ * ] writers ; } Book [ * ] books ; } class Writer extends att String [ NO_PRED ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Graph { att String [ NO_PRED ] name ; } class Graph NO_PRED Named { val Node [ * ] contents ; } abstract Graph extends Named { ref Graph [ NO_PRED ] graph ; } String [ NO_PRED ] label ; } String [ NO_PRED ] color ; att NO_PRED Node extends Graph { att String [ NO_PRED ] label ; att String [ NO_PRED ] node ; att class Edge extends Graph { att String [ NO_PRED ] weight ; ref Node [ NO_PRED ] source ; ref Node [ NO_PRED ] target ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet NO_PRED Model { att String [ NO_PRED ] name ; } class Model extends Named { ref String [ NO_PRED ] null ; val String [ NO_PRED ] size ; ref Select [ NO_PRED ] type ; ref boolean [ NO_PRED ] dynamic ; } class Table extends Named { val Column [ * ] col ; val class Column extends Named { val Table [ * ] tables ; } Type [ * ] f ; } class Column extends att Column [ 1 ] col ; val Column [ 1 ] source ; } String [ NO_PRED ] column ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Database { att String [ 1 ] name ; val Table [ * ] tables ; } abstract Table { att String [ NO_PRED ] name ; val Column [ * ] foreign ; } Key [ NO_PRED ] keys ; } Foreign [ + ] p ; val Column [ 1 ] database ; } class Column { ref column [ 1 ] referenced ; att String [ NO_PRED ] type ; att String [ NO_PRED ] null ; } boolean [ NO_PRED ] name ; att Foreign [ * ] key ; ref Foreign [ * ] foreign NO_PRED } class Foreign { ref String [ NO_PRED ] key ; ref Column [ NO_PRED ] key ; ref Column [ 1 ] key ; ref NO_PRED Column { ref String [ NO_PRED ] name ; ref Column NO_PRED NO_PRED ] key NO_PRED ref Column NO_PRED NO_PRED ] key NO_PRED ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph class Model { att String [ NO_PRED ] name ; } class Table extends Element { val Column [ + ] fields ; val Column [ NO_PRED ] column ; } Foreign [ + ] type ; } class Column extends Element { att String [ NO_PRED ] type ; att Table [ NO_PRED ] owner ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple abstract Person { val Person [ + ] persons ; val Town [ + ] town ; val Association [ * ] associations NO_PRED } abstract class Person { att String [ 1 ] full ; } class Man extends Person { } class Woman extends Person { } class Town extends NO_PRED { ref Committee [ * ] workers ; val Committee [ 1 ] committee ; val District [ + ] districts ; } abstract Association extends Named { ref Committee [ 1 ] committee ; } abstract class Named { att String [ NO_PRED ] name ; } abstract Committee extends Named { } abstract District extends Named { att Committee [ * ] facilities ; } class class Facility extends Named { } Facility [ * ] members ; } NO_PRED Facility extends Facility { } NO_PRED Facility extends Facility { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Model Remove val G [ * ] greet ; } Type [ * ] imports ; } class G { att String [ NO_PRED ] name ; } class Import { att String [ NO_PRED ] imported ; } String [ NO_PRED ] length ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet abstract State { att String [ NO_PRED ] label ; att int [ NO_PRED ] code ; att String [ NO_PRED ] data ; ref String [ NO_PRED ] label NO_PRED val Node [ * ] variables ; ref Value [ * ] nested ; ref Node [ 1 ] Father ; att String [ NO_PRED ] mother ; val String [ NO_PRED ] trigger ; val Transition [ * ] transitions ; att Node [ * ] parent ; } class Initial { val String [ NO_PRED ] name ; att Node [ * ] nodes ; val Transition [ * ] variables ; att String [ NO_PRED ] metadata ; } String [ NO_PRED ] metadata ; ref Arc [ * ] out ; } class Node { att String [ NO_PRED ] name ; att String [ NO_PRED ] type ; } class Transition { att String [ NO_PRED ] expression NO_PRED att String [ NO_PRED ] number ; att Node NO_PRED NO_PRED ] label ; att Node [ NO_PRED ] label ; att String [ NO_PRED ] name NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package r class F { ref State [ * ] owned ; ref State [ 1 ] initial ; att State [ + ] states ; att State [ 1 ] current ; att String [ NO_PRED ] name ; } class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] inc ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; ref String [ NO_PRED ] input ; att String [ NO_PRED ] output ; att Guard [ * ] action ; } class State { } String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class Arc { att String [ 1 ] name ; val Stat [ * ] machines ; val class Stat { att String [ NO_PRED ] initial ; att String [ * ] name ; val int [ NO_PRED ] number ; val Stat NO_PRED * ] events ; val Stat [ * ] states ; } class State { att String [ NO_PRED ] name ; att class State { att float [ NO_PRED ] initial ; att boolean [ NO_PRED ] name ; att Transition [ * ] transitions ; } Stat [ NO_PRED ] parent ; val class Transition extends State { val String [ NO_PRED ] value ; val class Final extends State { att Stat [ * ] state ; att class Stat { ref Stat [ NO_PRED ] machine ; att Stat [ NO_PRED ] Event [ att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Model { val My [ * ] greet ; } class G { att String [ NO_PRED ] nom ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class E { att E [ * ] e ; ref class E { att E [ NO_PRED ] e ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class A { val B [ * ] el ; att String [ NO_PRED ] name ; } NO_PRED B { val A [ * ] el ; att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Feature { val Comment NO_PRED NO_PRED ] f ; val Con [ * ] constraints ; val Group [ * ] p ; val class Feature extends Ident { att String [ NO_PRED ] name ; } Group [ * ] children ; val abstract Con extends att class Con { } Con NO_PRED * ] constraints ; } class Con { } int [ NO_PRED ] expression ; att String [ NO_PRED ] name ; } class Group extends Con { val class In extends Con { } class Alternative { val Ex [ * ] propositions ; } Con [ * ] following ; } class Con ; } String [ NO_PRED ] class ; } String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a abstract Association extends Class NO_PRED Element { } class Information extends Node NO_PRED Element { } class class Behavior extends Class { } Behavior [ * ] owned ; ref Behavior [ NO_PRED ] method ; } class St extends Behavior NO_PRED Element { } class Association extends Class NO_PRED Element { } class St extends Class NO_PRED Element { } abstract Association extends Node NO_PRED Element { } class Behavior extends Behavior NO_PRED Element { } class Class extends Beh NO_PRED Element { } class class Element extends Element { ref class Node extends Behavior NO_PRED Element { } class Node extends Behavioral NO_PRED Element { } class Node NO_PRED Class NO_PRED Element { } abstract class Node extends Class NO_PRED Element { } Beh NO_PRED NO_PRED ] specification NO_PRED } class Class NO_PRED Class NO_PRED Element { } class Operation extends Class NO_PRED Element { } abstract State NO_PRED Class NO_PRED Element { } class State extends Element NO_PRED Element { ref abstract class Execution { } boolean NO_PRED NO_PRED ] ID NO_PRED } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Net NO_PRED V { att class Region extends T { } A [ * ] ts ; val F [ * ] as ; val D [ * ] b ; } class T extends Named { } class N extends Named { } D [ * ] d ; } NO_PRED Named { att Nath [ NO_PRED ] name ; } class D extends Named { } D [ NO_PRED ] d ; ref NO_PRED D extends Named { Root NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model NO_PRED Machine { ET NO_PRED E { Composite { I { I { val F [ NO_PRED ] d ; val abstract class D { val String [ NO_PRED ] direction ; } class class D extends I { val H [ * ] states ; val D [ * ] transitions ; } abstract class AB extends att V [ NO_PRED ] initial ; att int [ NO_PRED ] kind ; val D NO_PRED 1 ] t ; } class M extends Default { val class D { ET { } E NO_PRED NO_PRED ] transition ; } class E { D { E { att class EV { E { att E NO_PRED * ] activity { } class E { E { } class E { E { ref D { NO_PRED ] sub NO_PRED } D { NO_PRED ] transition Pse att E { * ] transition NO_PRED att E { NO_PRED ] in NO_PRED val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar NO_PRED cd { ref String [ NO_PRED ] name ; att int [ NO_PRED ] ast ; } B [ NO_PRED ] ref ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class DB { att Table [ * ] tables ; } String [ 1 ] name ; } class Table { val Column [ * ] columns ; } String [ NO_PRED ] name ; } Foreign [ * ] NO_PRED ; } class Column { att String [ 1 ] name ; att String [ 1 ] name ; } NO_PRED class Key { att Column [ 1 ] columns NO_PRED } class Foreign extends Key { att NO_PRED Foreign extends Key { ref Table [ 1 ] target NO_PRED ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class class Asset { att float [ NO_PRED ] value ; } class School extends Book NO_PRED Asset { } NO_PRED School extends Library { att String [ NO_PRED ] location ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Root { att Root [ 1 ] root ; } Y [ 1 ] y ; } class Root { val B [ * ] b ; } Y [ * ] y ; val class Y { att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet NO_PRED Model { val User [ * ] elements ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package g class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types { @ Child { } Class [ NO_PRED ] sub ; } } class Class { ref Class [ * ] f ; } int [ NO_PRED ] name ; } class Class { }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar class F { att State NO_PRED * ] owned ; } Transition [ * ] transitions ; } class State { att String [ NO_PRED ] name ; ref class Transition { ref State [ 1 ] source ; ref State [ 1 ] outgoing ; att String [ NO_PRED ] label ; ref State [ 1 ] f ; att class Initial extends State { } NO_PRED Terminal extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package min NO_PRED State { } State [ * ] owned ; } State [ 1 ] initial ; ref State [ + ] final ; ref class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref F [ * ] inc ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] input ; att java [ NO_PRED ] output ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple abstract Autom { val Integer [ 1 ] name ; val State [ * ] states ; val Transition [ * ] transitions ; ref Action [ 1 ] alphabet NO_PRED } abstract State { att String [ 1 ] name ; } abstract State { att String [ 1 ] name ; att boolean [ 1 ] is ; } boolean [ 1 ] is ; } Autom [ * ] transitions NO_PRED ref class Transition { att State [ 1 ] source ; ref State [ 1 ] to ; att State [ 1 ] symbols ; } class Alphabet extends State { val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package min class class Pse { } Node [ NO_PRED ] out ; ref Transition [ * ] outgoing ; att class Transition { ref Node [ * ] source ; ref Node [ NO_PRED ] target ; } Boolean [ NO_PRED ] guard ; } String [ NO_PRED ] name ; } class Initial extends Node { } class Final extends Node { } abstract State extends Node { val Condition [ NO_PRED ] condition ; att class State { Node { att String [ NO_PRED ] name ; } int [ NO_PRED ] duration ; } class State { att Node [ * ] nodes ; att Event [ * ] transitions ; att String [ NO_PRED ] name ; } abstract Final { val String [ NO_PRED ] expression ; } class Time extends Transition { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c class Library { att String [ 1 ] name ; val Member [ * ] members ; } Library [ * ] books ; val class Book { att String [ NO_PRED ] name ; } Book [ * ] books ; } class Book { att String [ NO_PRED ] name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type abstract class Person { att String [ NO_PRED ] name ; att Person [ * ] children ; ref Person [ + NO_PRED 2 ] parents ; } Family [ NO_PRED ] mother ; } Man [ NO_PRED ] father ; } abstract Man { att String [ NO_PRED ] name ; val Person [ * ] members ; } abstract Man extends Person { ref class Woman extends Person { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = settle ) package pet class Chapter { att String [ * ] title ; } int [ NO_PRED ] pages ; att boolean [ NO_PRED Photograph published NO_PRED } Chapter [ * ] chapters ; } String [ NO_PRED ] is ; } class Chapter { att int [ NO_PRED ] title ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class Domain { att Abstract [ * ] elements ; } class Abstract extends Abstract { att String [ NO_PRED ] name ; val Abstract [ * ] elements ; } class Abstract { } class Import extends Abstract { att String [ NO_PRED ] imported ; } class Type extends Abstract { att String [ NO_PRED ] name ; } class Data extends Type { } class Entity extends Type { ref Entity [ NO_PRED ] super ; val Feature [ * ] elements ; } Feature [ * ] methods ; ref class Feature { att String [ NO_PRED ] many ; att boolean [ NO_PRED ] name ; ref Type [ NO_PRED ] type ; } boolean [ NO_PRED ] many ; } class Type extends } String [ NO_PRED ] method ; } boolean [ NO_PRED ] method NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext class Publication { val E [ * ] papers ; } abstract Par { att Par [ + ] authors ; } int [ NO_PRED ] title ; } class authors { att String [ NO_PRED ] name ; att String [ NO_PRED ] last ; att int [ NO_PRED ] email ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity NO_PRED Model { Named { val E [ * ] ref ; } C [ * ] es ; } class B { Named { } B [ * ] cs ; } class C extends Named NO_PRED } class Named { att String [ NO_PRED ] name ; } class Named extends Named { } F [ * ] fs ; } class F extends Named { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Concept NO_PRED Tr { att int [ NO_PRED ] Se ; att class Tr extends Thing { ref Tr [ * ] sensors ; } Sensor [ * ] Trace ; ref NO_PRED Station extends Switch { val Switch [ 1 ] Switch ; ref Switch [ 1 ] Switch ; } class Platform extends Thing { att Switch [ * ] Track ; val Signal [ * ] Switch ; ref Signal [ * ] Switch ; val Switch [ * NO_PRED * ] Sensor ; } class Switch extends Thing { ref Signal [ 1 ] Signal NO_PRED val class Sensor [ Thing { att Sensor NO_PRED 1 ] Switch NO_PRED ref Signal [ 1 ] Switch NO_PRED ref Signal NO_PRED + ] Switch NO_PRED att class Switch NO_PRED } class Switch extends Condition { ref Switch { 2 ] Switch NO_PRED att NO_PRED Se NO_PRED val Sensor NO_PRED 1 ] Switch NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Wh { val Program [ * ] program ; } class Program { val String [ NO_PRED ] name ; att Commands [ NO_PRED ] definition ; } class Definition { val String [ * ] name ; att Decl [ NO_PRED ] commands NO_PRED val String [ NO_PRED ] output ; } class Log { val Command [ * ] commands ; } class Command extends } String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED A NO_PRED } Root [ 1 ] root ; ref class Root { att A [ * ] b ; } NO_PRED
<s> @ namespace NO_PRED ur = NO_PRED NO_PRED prefix = NO_PRED ) package c class Pet { val Transition [ * ] transition ; val Arc [ * ] arc ; val Arc [ * ] arc ; val Place [ * ] place ; att String [ NO_PRED ] name ; } class Transition { att String [ NO_PRED ] name ; ref Arc [ * ] pre ; ref Arc [ * ] post ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] transition ; ref Place [ NO_PRED ] place ; } class Arc { att String [ NO_PRED ] inscription ; ref Transition [ NO_PRED ] place ; ref Transition [ NO_PRED ] transition ; ref NO_PRED Arc { att int [ NO_PRED ] place ; ref Arc NO_PRED NO_PRED ] name ; ref int [ NO_PRED ] token ; } Place { NO_PRED ] token ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Sub { class Sub { } } class Sub extends } } abstract Test extends } String [ 1 ] test ; } Test [ NO_PRED ] test ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Pet { att Place [ * ] nodes ; val Arc [ * ] arcs ; att abstract class Node { att String [ 1 ] name ; } Pet [ * ] in ; ref Arc [ * ] outgoing ; ref class Arc { ref Node [ 1 ] target ; ref Node [ 1 ] source ; } class Transition extends Node { } class Place extends Node { val int [ NO_PRED ] marking ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model abstract class Named { att String [ NO_PRED ] name ; } class Database { val Database [ * ] contents ; } abstract class Database extends Named { ref Database [ NO_PRED ] database ; } class Table extends Database { val Column [ * ] columns ; ref Column [ * ] primary ; } class Column extends Database { ref Table [ NO_PRED ] table ; att String [ NO_PRED ] name ; att class Foreign extends Database { ref Column [ NO_PRED ] parent ; att Column [ NO_PRED ] parent ; att String [ NO_PRED ] is ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Graph { att Node [ * ] nodes ; } abstract Node { val String [ NO_PRED ] name ; } Edge [ * ] outgoing ; ref Edge [ * ] incoming ; att class Edge { ref Node [ NO_PRED ] source ; ref Node [ NO_PRED ] target ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package my class Net { att String [ NO_PRED ] name ; val Arc [ * ] places ; val Transition [ * ] transitions ; } Arc [ * ] arcs ; } abstract Place { att String [ NO_PRED ] name ; } Token [ * ] tokens ; ref TP [ * ] out NO_PRED } TP [ * ] in ; } abstract Token { ref class Transition { att String [ NO_PRED ] name ; ref t [ * ] in ; } TP [ * ] out ; } class Arc { swallowed String [ NO_PRED ] weight ; } class Arc { Arc { ref Transition [ NO_PRED ] In ; ref Transition [ NO_PRED ] dst NO_PRED ref NO_PRED TP [ Arc { ref Transition [ NO_PRED ] src NO_PRED ref Place [ NO_PRED ] in ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext class A { } B [ NO_PRED ] a ; } D [ * ] x ; } class B { att D [ NO_PRED ] c ; } X [ NO_PRED ] b ; ref class C { ref class D { } A [ 1 ] a ; } Y [ NO_PRED ] y ; } class Y { } A [ NO_PRED ] a NO_PRED ref NO_PRED D { ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class class Named { att String [ 1 ] name ; } class Table extends Named { val Column [ * ] col ; ref Column [ * ] key ; } Foreign [ * ] f ; } abstract Column extends Named { ref Table [ 1 ] owner ; att Column [ NO_PRED ] key ; } Type [ 1 ] type ; } class Type extends Named { } @ Foreign { ref Column [ 1 ] owner NO_PRED ref Column [ * ] owner ; } NO_PRED Primary { val Sche [ * ] tables ; } Column [ * ] types ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Trace extends val String [ NO_PRED ] it ; } java [ 1 ] name ; } boolean [ 1 ] name ; } Data [ NO_PRED ] variables ; } class Trace { att String [ 1 ] name ; } E [ NO_PRED ] used ; } Input [ 1 ] values ; att abstract Value { ref Simulator [ 1 ] variable ; att String [ NO_PRED ] value ; att float [ 1 ] max ; att float [ NO_PRED ] min ; att float [ 1 ] max ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package research NO_PRED Super { att A [ * ] fo ; } Bar [ * ] bars ; } class Foo { att String [ NO_PRED ] name ; } Foo [ * ] bar ; } class Foo { att String [ NO_PRED ] bar NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c { class M extends NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U @ O extends Named { att B [ * ] b ; } C [ * ] my ; } F [ * ] js ; val F [ * ] k ; val abstract B extends Named { att O [ * ] k ; } abstract C { Named { } class D { att String [ NO_PRED ] name ; } class K extends Named { } F [ * ] fs ; } class F extends Named { } class G extends Named { val N [ + ] j ; } class K { Named { } N [ NO_PRED ] in ; } M [ * ] n ; } class N extends Named { } M [ * ] a ; } NO_PRED N extends K { att M [ * ] in ; } NO_PRED K extends Named { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class VM { val Action NO_PRED NO_PRED ] position ; val Se [ * ] neighbour ; val int [ NO_PRED ] heading ; att int [ 1 ] pen ; val Se [ * ] points ; val class Point { att java [ 1 ] x ; att double [ NO_PRED ] y ; } class Se { att Point [ NO_PRED ] point ; ref Point [ 1 ] location ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet NO_PRED class En { } Unit [ NO_PRED ] unit ; att String [ 1 ] unit ; } class class Unit { } class Length extends att String [ 1 ] unit ; } class Unit { val Base [ * ] units ; } class Unit extends Unit { val Unit [ + ] units ; val class Unit extends Unit { val Unit [ 1 ] unit ; att int [ 1 ] exponent ; } class Unit extends Unit { ref Base [ 1 ] base ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) gast java class State { att Region [ * ] states ; val Transition [ * ] transitions ; val abstract State { att boolean [ NO_PRED ] name ; ref Transition [ * ] outgoing ; ref Transition [ * ] incoming ; } class Transition { att State [ NO_PRED ] trigger ; ref String [ NO_PRED ] name ; ref State [ 1 ] target ; ref State [ 1 ] target ; } class Initial extends State { } class Final extends State { } class Final extends State { } class Final { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package feature class Block { val In [ + ] input ; val Out [ * ] output ; } abstract class Port { att int [ NO_PRED ] name ; } class In extends Port { } class Non extends Port { ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED Root NO_PRED Named { } String NO_PRED 1 ] e ; ref String [ NO_PRED ] description ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class class Contact { att String [ NO_PRED ] name ; att abstract Model { Named { val Address [ + ] categories ; val class Category extends Named { val E [ * ] next ; } Ind NO_PRED * ] entries ; } class class Address { } String [ NO_PRED ] number ; } Address [ NO_PRED ] category ; } class Employee { Named NO_PRED ref String [ NO_PRED ] description ; att String [ NO_PRED ] last ; ref Gender [ NO_PRED ] phone ; ref Address [ NO_PRED ] sponsored ; ref class Category { Named { Named { ref String [ NO_PRED ] organization ; att Employee [ 1 ] contacts ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math NO_PRED State { ref B [ + ] x ; val Y [ 1 ] 5 ] y ; } String [ NO_PRED ] title ; } class X extends A { } class E { att String [ NO_PRED ] short ; } class Y { att String [ NO_PRED ] id ; att String [ NO_PRED ] y NO_PRED } class C NO_PRED val A [ * ] as ; } D [ * ] y NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model NO_PRED Region { ref State [ 1 ] source ; ref State [ 1 ] to ; } String [ 1 ] name ; } Guard [ * ] owned ; val abstract State { att F [ NO_PRED ] incoming ; att State [ * ] in ; att String [ NO_PRED ] name ; att class Guard { att State [ * ] states ; att Transition [ * ] transitions ; } State [ 1 ] start ; ref NO_PRED State { att String [ NO_PRED ] value ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study class Department { ref Employee [ * ] has ; } abstract Employee { } Department [ NO_PRED ] has ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Property { Multi { ref class Collabor NO_PRED Multi { } Param [ NO_PRED ] direction ; } class Property extends Pin { } class Message NO_PRED Typ { } class Activity extends Pin { } class Write extends Struct { } class Param extends Multi { } class Variable extends att Param [ NO_PRED ] lower ; att class Multi extends Multi { att Param [ * ] parameter ; } class Param extends Property { } class Param extends Input { } class Port extends Multi { } class Port extends Multi { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract class Declaration { att String [ NO_PRED ] name ; att class Node extends Tree { att Leaf [ * ] children ; } NO_PRED Leaf extends Tree { } Leaf [ NO_PRED ] size ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p NO_PRED Model { val Class [ * ] b ; } class B { att String [ NO_PRED ] name ; val class Feature extends ID { val Type [ 1 ] base NO_PRED } class B { Entity { att Att [ * ] at ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext NO_PRED Device NO_PRED } Type [ * ] types ; } abstract Device { att String [ 1 ] name ; att Device [ * ] F ; } class F { att String [ NO_PRED ] name ; ref Param [ * ] param ; } class F extends att class W { att Param [ * ] Object ; att String [ NO_PRED ] name ; } class React extends Type { } class While extends Condition { val Action [ NO_PRED ] return NO_PRED } NO_PRED Return NO_PRED F [ att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract State { val State [ * ] transitions ; val State [ * ] states ; } String [ NO_PRED ] name ; } class Transition { ref State [ NO_PRED ] state ; ref Abstract [ 1 ] source ; ref Abstract [ 1 ] target ; att String [ 1 ] label ; } abstract class Abstract { ref State [ NO_PRED ] state ; NO_PRED String [ 1 ] name ; ref Composite [ NO_PRED ] composite ; } class Initial extends Abstract { } class Regular extends Abstract { } class State extends Abstract { ref State [ * ] states ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package dogs class Exam extends Observ { val Exam [ * ] exam ; val Controller [ * ] controllers ; val View [ * ] views ; } abstract class Exam extends Observ { } String [ NO_PRED ] question ; } class Open extends Exam { } class Multiple extends Exam { } class Observ { ref Observer [ * ] observers ; att class Observer { att abstract class Controller extends Observer { } abstract class View extends Observer { att String [ NO_PRED ] font ; att String [ NO_PRED ] location ; att Exam [ 1 ] controller ; } abstract Exam extends Controller { } class class View extends Controller { } class View extends Exam { } class Open { Exam { } class Multiple extends Exam { att class Multiple extends View { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class Network { val Place [ * ] places ; val Transition [ * ] transitions ; att class class Named { att String [ 1 ] name ; } class Place extends Named { ref Transition [ * ] post ; ref Transition [ * ] pret ; ref Net [ 1 ] c ; } class Transition extends Named { ref Place [ * ] prep ; ref Place [ * ] postp ; ref Net [ 1 ] c ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package hen class State { att State [ * ] states ; ref abstract State { ref String [ NO_PRED ] name ; att class Composite extends State { } class Final extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package feature class Root { Named { val B [ + ] ref ; } class L extends Named { ref A [ NO_PRED ] c ; } A [ * ] parent ; } class Named extends Named { } NO_PRED class Named { att int [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c class Unit { att B NO_PRED NO_PRED ] ra ; } M [ * ] ra ; } class class A { } NO_PRED class Node { } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U abstract Protocol extends Association NO_PRED Element { } class Struct extends Property NO_PRED Element { } class Information extends Association NO_PRED Element { } class Association extends Property NO_PRED Element { } class Extension extends Association NO_PRED Element { } class Property extends Element { ref Property [ 2 NO_PRED * ] member ; } class Property { Element { att Agg [ NO_PRED ] aggregation ; } class class Element { att String [ NO_PRED ] ID ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test @ Class { val Instruction [ * ] instructions ; } abstract Instruction { } class Digital extends Instruction { att String [ NO_PRED ] name ; val Variable [ * ] params ; val Instruction [ * ] instructions ; } abstract Node { att Param [ NO_PRED ] name ; } NO_PRED Param extends Instruction { att Procedure [ 1 ] declaration ; ref boolean [ NO_PRED ] args ; val NO_PRED Proc extends Instruction { att int [ NO_PRED ] cm ; } class Left extends Instruction { att int [ NO_PRED ] angle ; } class Right extends Instruction { } int [ NO_PRED ] angle ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity NO_PRED F { att State [ * ] owned ; ref State [ 1 ] initial ; } State [ 1 ] final ; } class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] inc ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; } String [ NO_PRED ] input ; att String [ NO_PRED ] output ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package feature class model { Station { val String [ NO_PRED ] name ; att String [ NO_PRED ] key ; } String [ NO_PRED ] update ; att long [ * ] variables ; val String [ NO_PRED ] type ; ref class D { An { } abstract Graph NO_PRED Node { att String [ NO_PRED ] transition ; att String [ NO_PRED ] transition ; val String [ NO_PRED ] transition ; att boolean [ NO_PRED ] direction ; val String [ NO_PRED ] guard ; val boolean [ NO_PRED ] from ; } boolean [ NO_PRED ] use NO_PRED } class Extension [ Relationship NO_PRED att Event [ NO_PRED ] next NO_PRED } class Check NO_PRED State NO_PRED val State [ NO_PRED ] state NO_PRED att class Station NO_PRED Named [ att Module [ NO_PRED ] exception { ref class Context { State NO_PRED att State [ 1 ] parent NO_PRED } State NO_PRED NO_PRED ] parent ; } Event NO_PRED NO_PRED ] i ; att String NO_PRED NO_PRED ] type NO_PRED ref boolean NO_PRED 1 ] parent NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U abstract Book { att Class [ * ] children ; val class Class { att String [ NO_PRED ] name ; val Type [ * ] attributes ; } class Att { val String [ NO_PRED ] name ; } String [ NO_PRED ] type ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Process { att String [ 1 ] name ; val Process [ * ] process ; } class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ 1 ] name ; } class Work extends Process { ref Work [ 1 ] link ; ref Process [ 1 ] predecessor ; ref R [ 1 ] successor ; } NO_PRED class Process { } class Guid extends Process { ref Process [ * ] element ; att String [ 1 ] text ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED class Named { att java [ 1 ] name ; } abstract Package extends Named { val Class [ * ] class ; val Depend [ * ] dat ; val class class Class extends Named { } class Data extends Class { } class En extends Class { ref Class [ * ] super ; val Att [ * ] attributes ; att String [ 1 ] is ; } class Att extends Named { ref boolean [ 1 ] multi ; ref Class [ 1 ] type ; ref Class NO_PRED 1 ] owner ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school class Player { att String [ NO_PRED ] name ; att Date [ NO_PRED ] date ; att double [ NO_PRED ] height ; att double [ NO_PRED ] is ; att class League { att String [ NO_PRED ] name ; val Player [ * ] players ; } class Special { att Match [ * ] matchups ; att Tournament [ NO_PRED ] type ; att class Match { val Game [ 2 ] games ; } class Game { ref Match [ NO_PRED ] matchup ; ref Player [ NO_PRED ] player ; } int [ 0 NO_PRED 10 ] frames ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met class Author NO_PRED val Book [ * ] books ; } abstract Book { ref java [ NO_PRED ] key ; ref Section [ 1 ] chapters ; } abstract Chapter { att String [ 1 ] title ; att int [ 1 ] n ; att String [ 1 ] author ; } B [ 1 ] book ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school class Exam extends Observ { val Exam [ + ] exam ; val Controller [ * ] controllers ; val View [ * ] views ; } abstract class Exam extends Observ { att String [ NO_PRED ] question ; } class Open extends Exam { } class Multiple extends Exam { Ass NO_PRED } double [ 1 ] optional ; } class Observ { ref Observer [ * ] observers ; att class Observer { } abstract class Controller extends Observer { } abstract class View extends Observer { att String [ NO_PRED ] controller ; att String [ NO_PRED ] font ; ref Controller [ behav ] controller ; } abstract Exam extends Controller { } abstract class Exam extends Controller { } class Controller extends Controller { revolution NO_PRED } class Multiple { Exam { } class Exam { View { } class View [ View { } class Exam { View { } class Exam { View { Multiple NO_PRED att class Exam NO_PRED View { } String [ NO_PRED ] controller { att String NO_PRED * ] question { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library @ model { B { ref B [ * ] ref ; } C [ * ] k ; } abstract B extends Named { } G [ * ] cs ; } T [ * ] g ; } abstract C extends Named { } class Named { att String [ NO_PRED ] name ; } class K extends L { B { } F [ * ] fs ; } class F extends Named { } M [ * ] js ; } D [ NO_PRED ] k ; } class J extends Named { } I [ * ] h ; } class H extends Named { } NO_PRED W extends Named { } class C extends Named { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Domain { val Abstract [ * ] elements Original } class Package { } class Type NO_PRED Abstract { att String [ NO_PRED ] name ; } Abstract [ * ] elements ; } class Package extends Abstract { att String [ NO_PRED ] imported ; } class Type extends Abstract { } String [ NO_PRED ] name ; } class Data extends Type { } class Entity extends Type { val Entity [ NO_PRED ] super ; val Feature [ * ] features ; } class Feature { att boolean [ NO_PRED ] many ; att String [ NO_PRED ] name ; att Type [ NO_PRED ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types NO_PRED Company { ref Employee NO_PRED * ] categories ; val Product [ * ] rule ; } class Category { att String [ 1 ] name ; val class Article { att Product [ 1 ] condition NO_PRED val Rule [ NO_PRED ] next ; } class Rule { att Filter [ NO_PRED ] test ; ref Filter [ NO_PRED ] equation ; val class Node extends att E [ NO_PRED ] category ; att class Target extends ref int [ NO_PRED ] reference ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study class F { val State NO_PRED * ] owned ; val class State { att State [ 1 ] initial ; att String [ NO_PRED ] name ; val Transition [ * ] outgoing ; ref Transition [ * ] incoming ; } boolean [ NO_PRED ] initial ; } java [ 1 ] final ; } class Transition { att State [ 1 ] source ; ref State [ 1 ] target ; att java [ NO_PRED ] input ; att java [ NO_PRED ] output ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package family class Model NO_PRED Type { val Department [ * ] owns ; val Property [ * ] attributes ; } class Att extends Type { } class class Type extends att String [ 1 ] name ; } class Initial extends Named { val Abstract [ * ] elements ; } Prim [ * ] names NO_PRED att class Import { Named { } Type [ 1 ] target ; att abstract Prim extends Named { } abstract Prim extends Struct { } Type [ 1 ] type ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package feature class Net { val Place [ * ] places ; val Transition [ * ] transitions ; att abstract Place { ref Place [ + ] input ; ref Place [ + ] output ; att String [ NO_PRED ] name ; } abstract Place { att String [ NO_PRED ] name ; att String [ NO_PRED ] tokens ; att NO_PRED Initial { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED State { Named { ref State [ * ] owned ; ref Transition [ * ] transitions ; att State [ 1 ] initial NO_PRED } class State extends Named { ref Transition [ * ] outgoing ; ref Transition [ * ] outgoing ; ref class Final extends Named { ref Condition [ * ] event ; val Occ [ 1 ] source ; val State [ 1 ] source ; } class Named extends Identified int [ 1 ] time ; ref NO_PRED class State { att String [ NO_PRED ] predictive ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract New { att Super [ NO_PRED ] type ; } int [ 1 ] Name ; ref String [ NO_PRED ] url ; att String [ 1 ] max ; val class Single { att String [ 1 ] name ; val Label NO_PRED * ] sensors ; att class Technology { att String [ NO_PRED ] name ; ref NO_PRED Model extends att Sensor [ * ] locations ; val State [ 1 ] sensors ; } Action [ * ] rules ; } class Location { att Sensor [ 1 ] conditions ; val Action [ * ] event ; } Event [ 1 ] clock ; att abstract Condition { } Event NO_PRED 1 ] condition NO_PRED } Event [ 1 ] event NO_PRED att Sever [ 1 ] operator ; val abstract Main NO_PRED att String ; 1 ] value NO_PRED } int [ 1 ] value NO_PRED att class Time extends att State [ 1 ] value ; ref class Atom NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Graph NO_PRED class W extends NO_PRED { } R [ * ] m ; val abstract M extends att boolean [ NO_PRED ] id ; val NO_PRED class N extends N { } D [ * ] d ; } class D extends att String [ NO_PRED ] name ; } class W extends A { } A [ NO_PRED ] w ; } class class N { M { val L [ * ] bes ; } class NO_PRED extends Named { } NO_PRED F extends att String [ NO_PRED ] name ; } NO_PRED F extends M { } M [ * ] v ; } abstract N extends N { val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d class class Node { Graph NO_PRED ref abstract class Graph { Graph { val
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Trace extends val String [ 1 ] source ; val Trace [ * ] requirements ; val T [ * ] scenario ; val Some [ * ] scenario ; } class class T { } String [ NO_PRED ] name NO_PRED att class Tr { T { att T [ 1 ] target ; ref T NO_PRED 1 spoilers NO_PRED ; } class Rule extends T { ref T [ 1 ] scenario ; ref Entity NO_PRED 1 ] class ; } Graph [ * ] unit ; ref class ET { T { att State [ 1 ] f ; ref State [ 1 ] transition [ att Graph [ 1 ] operation NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class State { att F [ * ] enumer ; } En NO_PRED * ] states ; } class En { att State [ NO_PRED ] name ; val En [ * ] states ; } class Transition { val Type [ NO_PRED ] name ; } Init [ * ] outgoing ; } class Transition { ref En [ NO_PRED ] source ; } NO_PRED Initial { val String [ NO_PRED ] name ; } En [ * ] owned ; } class En { att String [ NO_PRED ] name ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Player { att String [ NO_PRED ] name ; att Date [ NO_PRED ] date ; att double [ NO_PRED ] height ; att boolean [ NO_PRED ] is ; } class League { att String [ NO_PRED ] name ; val Player [ * ] players ; } class Tournament { val Match [ * ] matchups ; att Tournament [ NO_PRED ] type ; att class Match { val Game [ 2 ] games ; } class Game { ref Match [ 1 ] matchup ; ref Player [ 1 ] player ; att int [ 0 NO_PRED 10 ] frames ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Book { abstract A { ref String [ NO_PRED ] name NO_PRED att class A { } } Book { pref NO_PRED NO_PRED Class extends ref String [ NO_PRED ] name ; } String [ * ] zip ; } Book NO_PRED * ] items ; } NO_PRED bra { att boolean [ NO_PRED ] name ; att int [ NO_PRED ] year ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Cal extends Atomic { val State [ * ] declarations ; val Re [ * ] actions ; val Output [ * ] init ; val Function [ * ] functions ; val Schedule [ NO_PRED ] schedule ; } class Fire extends Param { } abstract Typ extends Typ { } class Typ extends Abstract { } class Typ extends Variable { att boolean [ NO_PRED ] constant ; att boolean [ NO_PRED ] initial ; }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class System { att java [ 1 ] event ; att String [ * ] name ; att String [ NO_PRED ] time ; val double [ NO_PRED ] description ; att Resource [ * ] gate ; } String [ NO_PRED ] objects NO_PRED improv String [ 1 ] exp ; att class Gate { att double [ NO_PRED ] type ; att String [ NO_PRED ] name ; att Event NO_PRED 0 ] possible ; } String [ 1 ] weight ; att class Event { att Function [ NO_PRED ] start ; val int [ NO_PRED ] name ; att float [ NO_PRED ] description ; val float [ NO_PRED ] description ; val Event [ * ] events ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types class class Root { } class A extends A { B { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type NO_PRED A { att class B { A { } class C extends A { } NO_PRED C extends B { } NO_PRED E extends D { } NO_PRED Some extends F { } NO_PRED E extends A { } NO_PRED I { val A [ * ] a ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library abstract Edge NO_PRED View { ref View [ 1 ] source ; ref View [ 1 ] target ; val Bend [ NO_PRED ] bend ; val Anch [ NO_PRED ] source ; val Anch [ NO_PRED ] target ; val class Node extends View { val Layout [ NO_PRED ] layout ; val class class Style { } class Fill extends Style { att String [ NO_PRED ] fill ; att int [ NO_PRED ] transparency ; } int [ NO_PRED ] data NO_PRED } class Line extends Style { att int [ NO_PRED ] line ; att
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package university NO_PRED Book extends att String [ 1 ] name ; val Book [ * ] books ; } E [ 1 ] address ; val Address [ * ] members ; val Caf [ 1 ] cafeteria ; val class Book { } String [ NO_PRED ] title ; } abstract Person { val String [ 1 ] name ; att class Person { att String [ NO_PRED ] name ; } Library [ 1 ] library ; } class Address { att char [ NO_PRED ] name ; ref Library [ NO_PRED ] library ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class F { att State [ * ] owned ; val Transition [ * ] transitions ; } State [ 1 ] initial ; } String [ NO_PRED ] name ; } class State extends State { ref abstract Transition { att String [ NO_PRED ] name ; } Transition [ 1 ] f ; } Transition [ * ] transition ; ref Transition [ * ] inc ; } class Transition extends State { } NO_PRED Non { att State [ 1 ] f ; ref State [ 1 ] src NO_PRED ref State [ 1 ] to ; att String [ NO_PRED ] name NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package t class Net { att Route [ 1 ] diagram ; } P NO_PRED NO_PRED ] c ; } With NO_PRED * ] trace ; val class Ch { ref Pet [ NO_PRED ] element ; att Pet [ NO_PRED ] lakes ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class Template extends Behavior { } class Inter extends Beh { } class Information extends State { } class Activity extends Class { } class Node extends Node { } class Component extends Class { } class Behavior extends Class { } class Class extends Node { } class Inter NO_PRED Beh NO_PRED } class Beh extends Behavioral { } class Use extends Behavioral { } class Re { ref NO_PRED St extends Behavior { } class State extends Behavior { } class Node extends Class { } class Behavior extends Beh { } class Use extends Class { } Type [ NO_PRED ] specification { } class Struct { } Behavior [ * ] owned ; } Behavior NO_PRED NO_PRED ] method ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package activity class T { att String [ NO_PRED ] name ; val Transition [ * ] transitions ; val State [ * ] state ; ref class State { att String [ NO_PRED ] name ; ref State [ 1 ] source ; ref State [ NO_PRED ] to ; } class State { att String [ NO_PRED ] name ; ref Transition [ * ] in ; ref Transition [ NO_PRED ] incoming ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Time { att String [ NO_PRED ] user ; att String [ 1 ] password ; } boolean [ 1 ] password ; att String [ 1 ] sap ; } class Program { att String [ 1 ] name ; att Date [ 1 ] project ; val ref Time { ref User [ 1 ] user ; att Project [ NO_PRED ] project ; att int [ NO_PRED ] day ; att Date [ NO_PRED ] day ; att Date [ NO_PRED ] till ; att String [ NO_PRED ] duration ; att String [ NO_PRED ] by ; } String [ 1 ] notes ; ref String [ 1 ] graph ; } class Project { att Library [ * ] contents NO_PRED val User [ * ] list [ val User [ * ] list { val abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class M { att String [ NO_PRED ] name ; val Declaration [ * ] variables ; val Block { + ] statements ; } class Variable { att Variable NO_PRED 1 ] variable ; } class class Statement { } class If extends Statement { ref Expression [ NO_PRED ] default ; val Expression [ 1 ] left ; att class Variable extends Statement { val Variable [ 1 ] expression ; } abstract Try NO_PRED att String [ 1 ] name ; } abstract class Expression extends } class Statement extends Binary { att Expression [ 1 ] oper ; val Expression [ 1 ] oper ; } class class Atomic extends Expression NO_PRED } abstract Lit extends Expression NO_PRED } int [ 1 ] raw extends } class Add { Atomic { ref Return NO_PRED 1 ] object NO_PRED } class N extends Atomic NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Service { att String [ NO_PRED ] name ; att Java [ * ] packages ; } class Java { att String [ NO_PRED ] name ; att Java [ NO_PRED ] option ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Family { att Parent [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet NO_PRED NO_PRED { } String [ NO_PRED ] some ; att B [ * ] b ; } class B { att String [ NO_PRED ] b ; } NO_PRED C { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple class class { Named { ref Type [ * ] some ; } class Type extends Named { ref Type [ * ] some ; } class class Named { att String [ NO_PRED ] name ; } class Test { Named { val Type [ * ] all ; } Type [ * ] all ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package class NO_PRED @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package class NO_PRED } class { } NO_PRED class NO_PRED { } NO_PRED NO_PRED namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package sub NO_PRED class class { } } NO_PRED NO_PRED NO_PRED } String [ NO_PRED ] val NO_PRED att } NO_PRED NO_PRED ] ref ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Extension { att Agg [ NO_PRED ] is ; att Agg [ NO_PRED ] is ; } class Extension extends Property { } class Extension extends Property { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Stat { att State [ * ] states ; val State [ 1 ] initial ; ref State [ + ] final ; } State [ 1 ] current ; } String [ NO_PRED ] name ; } class State { ref F [ 1 ] owning ; att String [ NO_PRED ] name ; } Transition [ * ] outgoing ; ref Transition [ * ] incoming ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; ref String [ NO_PRED ] input ; att String [ NO_PRED ] output ; ref Event [ * ] action ; att NO_PRED Event { } String [ NO_PRED ] input ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java @ Column { att String [ 1 ] title ; att String [ * ] writers NO_PRED att String [ * ] city ; val class Document { att java [ 1 ] name ; att Book [ 1 ] teacher ; } class Library { ref java [ 1 ] key ; ref Writer [ 1 ] value subject } NO_PRED Writer { att java [ 1 ] name ; } NO_PRED Book { ref Writer [ * ] key ; ref city [ NO_PRED ] city ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package x class Component { val Port [ * ] ports ; } class class Port { att class In { ref Port [ 2 ] in ; ref Port [ * ] out ; } class In extends Port { } class Out extends Port { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p NO_PRED Multi { att String [ NO_PRED ] first ; att String [ NO_PRED ] id ; ref Team [ 1 ] departments ; } Employee [ + ] Works ; } NO_PRED Department { att String [ NO_PRED ] name ; val String [ NO_PRED ] Employee ; val int [ NO_PRED ] number ; ref Employee [ * ] employees ; ref Project [ * ] Controls ; } class Project { att String [ NO_PRED ] name ; att int [ NO_PRED ] priority ; ref Employee [ * ] Works ; ref Employee [ * ] Controls ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class Family { ref String [ NO_PRED ] name ; att class B { att String [ NO_PRED ] b ; } NO_PRED C NO_PRED A { att double [ NO_PRED ] m ; } NO_PRED DL { A { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package research class C { val J [ * ] types ; } abstract Type { val String [ NO_PRED ] name ; } class Dat extends Type { } class Entity extends Type { val Entity [ NO_PRED ] super ; val Feature [ * ] properties ; ref class Property { att String [ NO_PRED ] name ; att Data [ NO_PRED ] many ; } String [ NO_PRED ] primary ; } Type [ 1 ] type ; } NO_PRED Prim NO_PRED Property { att En [ * ] items ; } class En { att String [ NO_PRED ] name ; ref String [ NO_PRED ] value ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple class Exam extends Observ { val Exam [ * ] exam ; val Controller [ * ] controllers ; val View [ * ] views ; val abstract class Exam extends Observ { } String [ NO_PRED ] question ; att class Open extends Exam { } class Multiple extends Exam { } class Observ { ref Observer [ * ] observers ; } class Observer { } abstract class Controller extends Observer { } abstract class View extends Observer { att String [ NO_PRED ] font ; att String [ NO_PRED ] font ; ref Exam [ NO_PRED ] controller ; att abstract Exam extends Controller { } abstract class Exam extends Controller { } class View extends Exam { } class Open extends Exam { } class Multiple extends View { } class Exam extends View { } class Exam extends View { } class Exam extends View { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package g class Model { val G [ * ] greet ; } abstract G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families NO_PRED Abstract { val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a class Database { att class Root { Root NO_PRED } String [ NO_PRED ] name ; att Table [ * ] tables ; val class Table extends att String [ NO_PRED ] name ; val Column [ * ] columns ; } class Column { att Column [ NO_PRED ] name ; att String [ NO_PRED ] name ; } Foreign [ * ] column ; } class Abstract { att class Primary { } class D extends Abstract { } abstract Date extends Abstract { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class abstract { @ Class [ * ] classes ; val Association [ * ] associations ; val String [ NO_PRED ] name ; } class Class { att Att [ * ] attributes ; } Class NO_PRED 1 ] super NO_PRED att int [ NO_PRED ] id ; } abstract Association { att String [ NO_PRED ] name ; att NO_PRED Association { ref ph [ 2 ] target ; ref Cl [ NO_PRED ] target ; att int [ NO_PRED ] relation ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school class Library { att String [ 1 ] name ; val Book [ * ] books ; val Loan [ * ] loans ; val Member [ * ] members ; } class Book { att String [ 1 ] name ; att java [ 1 ] copies ; ref Library [ NO_PRED ] library ; } Loan [ * ] loans ; } class Member { att String [ 1 ] name ; ref Library [ NO_PRED ] library ; ref Loan [ * ] loans ; ref Book [ * ] books ; } class Loan { ref Book [ 1 ] book ; ref Member [ 1 ] member ; ref Date [ NO_PRED ] date ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph abstract class Named { Named { att class class Named { att String [ NO_PRED ] name ; } abstract If extends Instruction { att int [ NO_PRED ] speed ; att double [ NO_PRED ] infinite ; } class Turn extends Action { att int [ NO_PRED ] distance ; att boolean [ NO_PRED ] infinite ; } class Left NO_PRED Action { att class Go NO_PRED Action { att int [ NO_PRED ] degrees ; att boolean [ NO_PRED ] random ; att class Go extends Action { att class class Action { Named { } class class Block { Named { } abstract Send extends Named { } class Go extends Named { val Block [ NO_PRED ] instructions ; att Block [ NO_PRED ] instructions ; } class Forward extends att Channel [ NO_PRED ] instructions NO_PRED } Break [ NO_PRED ] target ; } class Flow extends Ch extends att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package domain class Exam NO_PRED Observ { val Exam [ 2 ] exam ; val Controller [ * ] controllers ; val View [ * ] views ; val abstract class Exam extends Observ { att String [ NO_PRED ] question ; att class Open extends Exam { } class Multiple extends Exam { } class Observ { ref Observer [ * ] observers ; } abstract Observer { } abstract class Controller extends Observer { att abstract class View extends Observer { val String [ NO_PRED ] font ; att String [ NO_PRED ] font ; ref Exam [ NO_PRED ] controller ; } abstract Exam extends Controller { } abstract class Exam extends Controller { } class View extends Exam { } class NO_PRED extends Exam { } class Exam extends Exam { } class Exam { View { } class NO_PRED extends View { } View { NO_PRED ] exam NO_PRED att class Exam extends View extends } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Model NO_PRED Model { val Entity [ + ] tables ; att DB [ * ] foreign ; } class Table { Column { ref Column [ + ] column ; ref Column [ * ] primary ; val Column [ * ] foreign ; att Column [ * ] in ; } class Column extends Named { att String [ NO_PRED ] type ; att class class Named { } String [ NO_PRED ] name ; } class Sche { att Rel [ NO_PRED ] table NO_PRED ref Table [ 1 ] target ; ref String [ 1 ] weight ; att String [ 1 ] target NO_PRED att String [ NO_PRED ] max ; att int [ NO_PRED ] max ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package description { @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tool { abstract B extends Style { att java [ NO_PRED ] border ; ref Color [ 1 ] border ; } boolean [ NO_PRED ] border ; } abstract class Node extends Style NO_PRED B NO_PRED Label NO_PRED Tool NO_PRED Hide NO_PRED ref Double [ NO_PRED ] text ; att boolean [ 1 ] label ; att boolean [ NO_PRED ] resize ; att boolean [ NO_PRED ] offset ; att class Side extends Node { abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Family { val Family [ * NO_PRED 5 ] families ; val class Family { att father [ NO_PRED ] father ; val Family [ NO_PRED ] mother ; val Family [ * ] sons ; val Family [ * ] daughters ; val String [ NO_PRED ] name ; } class Family { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types class Database { att Column [ * ] foreign ; val F [ * ] table ; } class Foreign { att String [ NO_PRED ] name ; ref Column [ NO_PRED ] database ; ref Column [ * ] Column NO_PRED } class Column { att String [ NO_PRED ] Name ; att Column [ 1 ] r ; ref String [ NO_PRED ] Type ; att boolean [ NO_PRED ] is ; ref class Foreign { ref Column [ 1 ] Source ; att Column [ 1 ] target ; ref Column [ + ] Column ; ref Column [ + ] NO_PRED ; ref Column [ 1 ] column ; att boolean [ 1 ] Name NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple class Net { ref String [ NO_PRED ] capacity ; } int [ NO_PRED ] name ; att Transition [ * ] inhibitor ; } Arc [ NO_PRED ] pet ; } class Transition { att int [ NO_PRED ] weight ; ref String [ NO_PRED NO_PRED to ; ref Arc [ NO_PRED ] transition ; } Place [ 1 ] place ; } Arc [ 1 ] pet ; } NO_PRED Arc { att int [ NO_PRED ] name ; } Arc [ 1 ] in ; ref NO_PRED Place { val Place [ * ] places ; val Arc [ * ] arcs ; val Arc [ * ] transitions ; } String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple abstract Path { att java [ 1 ] name ; } class Path extends Element { val State [ * ] states ; val Transition [ * ] transitions ; } class valiant { ref Transition [ * ] incoming ; ref Transition [ * ] outgoing ; ref Path [ 1 ] owner ; } class Transition extends Element { ref State [ 1 ] source ; ref State [ 1 ] target ; } NO_PRED Initial extends State { } boolean [ NO_PRED ] initial ; } class Final extends State { } boolean [ NO_PRED ] bool ; } class Internal extends State { att State [ NO_PRED ] int int val NO_PRED Internal NO_PRED } NO_PRED State extends State NO_PRED } NO_PRED Internal { State NO_PRED } class namespace ( ur = NO_PRED NO_PRED ID = NO_PRED ) package ID NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class class Arc { att String [ NO_PRED ] name ; } class Pet extends val Element [ * ] elements ; } class class Node extends Element { } class class Arc extends Element { ref class Place extends Arc { ref Place [ 1 ] dest ; ref Token [ 1 ] to ; } class Input extends Arc { ref Place [ 1 ] to ; ref Place [ 1 ] from ; } class Output extends Node { } int [ NO_PRED ] min ; att double [ NO_PRED ] min ; att NO_PRED Input extends Node { att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED A { Class { B { val class NO_PRED { } B [ NO_PRED ] a ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Trace extends val String [ NO_PRED ] name ; ref Step NO_PRED * ] sub ; att State [ 1 ] models ; } abstract Trace { ref String [ NO_PRED ] id ; att String [ NO_PRED ] name ; } Node [ * ] elements ; } int [ NO_PRED ] result ; } NO_PRED Trace { att String [ NO_PRED ] type ; att String [ NO_PRED ] name NO_PRED att String [ NO_PRED ] id ; } E [ 1 ] value NO_PRED } NO_PRED Import { val String [ NO_PRED ] u NO_PRED att E [ * ] annotation ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Class { att Class [ NO_PRED ] r ; } Class [ * ] r ; } NO_PRED Class extends } Class [ NO_PRED ] e ; } NO_PRED Class { } D [ NO_PRED ] e ; } NO_PRED My { } D [ NO_PRED ] f ; } Z [ NO_PRED ] h ; } M [ NO_PRED ] e ; } NO_PRED E { ref B [ NO_PRED ] e ; } class F { ref NO_PRED I { ref Recording H { } NO_PRED H { } E [ * ] g ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class Class { val int [ * ] test NO_PRED } Test [ NO_PRED ] test ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Block { val In [ + ] input ; val Out [ * ] output ; } abstract class Port { att int [ NO_PRED ] name ; } class In extends Port { } abstract Out extends Port { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types NO_PRED Class { att B [ NO_PRED ] some ; val A [ NO_PRED ] ref ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple class E { val Entity [ * ] entity ; ref class Entity { att java [ NO_PRED ] name ; } System [ NO_PRED ] system ; } Boolean [ NO_PRED ] cardinal ; att Att [ NO_PRED ] NO_PRED ; } class Relationship { att String [ NO_PRED ] name ; ref Meg [ 1 NO_PRED * ] entities ; } NO_PRED General { att String [ NO_PRED ] name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Type class Test { ref String [ NO_PRED ] test ; } String [ NO_PRED ] test ; att NO_PRED Test NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class For { Expression { val Expression [ 1 ] left ; val Expression [ NO_PRED ] right ; att abstract class Expression { val String [ NO_PRED ] value ; } class Atomic extends Binary { att Integer [ NO_PRED ] value ; } class String extends Expression { att Expression horses 1 ] expression ; att abstract Constant extends } Expression [ 1 ] expression ; } }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package m class R extends R { ref String [ NO_PRED ] r ; ref R [ 1 ] r ; ref R [ * ] r ; } R [ * ] r ; } abstract R extends R { ref R [ 1 ] r ; ref R [ 1 ] r ; ref R [ 1 ] r NO_PRED ref NO_PRED R extends R { ref R [ 1 ] r ; ref R [ 1 ] r ; ref R [ 1 ] r ; ref NO_PRED R NO_PRED ref String [ 1 ] r ; } String [ 1 ] r ; ref String NO_PRED 1 ] r ; att abstract R NO_PRED R NO_PRED att R extends 1 ] r extends att class R NO_PRED R NO_PRED att R ; 1 ] r NO_PRED ref R [ 1 ] r sponsor ref R NO_PRED 1 ] r NO_PRED att R NO_PRED 1 ] referenced NO_PRED ref abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o NO_PRED Gene { val Gene [ * ] families ; val class Family { att Gene [ 1 ] gene ; att String [ NO_PRED ] name ; val Individual [ * ] members ; ref abstract Type { att String [ 1 ] name ; } boolean [ 1 ] female ; } Gene [ 1 ] family ; ref NO_PRED
<s> @ namespace ( ur NO_PRED NO_PRED NO_PRED prefix = NO_PRED ) package my NO_PRED Hello { } Z [ * ] name ; } Person [ NO_PRED ] person ; } class NO_PRED { att String [ NO_PRED ] name ; } class Person { att String [ NO_PRED ] name ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar class A { att int [ NO_PRED ] A ; val B [ * ] bl ; val C [ * ] c ; val String [ NO_PRED ] string ; att String [ NO_PRED ] a ; } Compar [ * ] recovery NO_PRED att class B { att String [ NO_PRED ] string ; } D [ NO_PRED ] d ; } class C { att String [ NO_PRED ] key ; ref String [ NO_PRED ] value ; } NO_PRED D { att E [ * ] e ; att String [ NO_PRED ] name ; } NO_PRED E { att String [ NO_PRED ] name ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o class State { att String [ NO_PRED ] name NO_PRED } abstract State extends Named { val Region [ * ] states ; val Transition [ * ] transitions ; laud class State extends Named { ref Transition [ * ] is ; ref Transition [ * ] inc ; ref State [ NO_PRED ] f ; } boolean [ NO_PRED ] initial ; att long [ NO_PRED ] final ; } class Transition extends State { } class Transition extends State { ref NO_PRED State extends Named { ref State [ 1 ] source ; ref State [ 1 ] source ; val Guard [ 1 ] trigger ; delegation State [ NO_PRED ] f ; ref boolean [ 1 ] operation ; } boolean [ NO_PRED ] initial ; } int [ NO_PRED ] state NO_PRED } class Trigger extends Named { ref boolean [ NO_PRED ] duration ; } NO_PRED Trigger { att String [ NO_PRED ] duration { val class Trigger extends Named NO_PRED att class Trigger extends State extends att class Initial extends State NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package hen abstract Deter { NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school class Order { } String [ NO_PRED ] name ; val Required [ 1 ] content ; val Required [ * ] required ; val Provided [ * ] provided ; val Binding [ * ] bindings ; } Binding [ * ] sub ; } abstract class Interface { att String [ NO_PRED ] name ; } String [ 1 ] signature ; att class Required { ref Interface [ 1 ] from ; ref String [ 1 ] name ; ref Binding [ NO_PRED ] attributes ; } Required [ NO_PRED ] from ; att class Required { ref Component [ 1 ] content ; att String [ NO_PRED ] name ; att int [ 1 ] expression ; val class Required { Interface { } class Binding { Interface { } Required NO_PRED NO_PRED ] to ; } Required [ * ] required ; } class Binding { att String [ NO_PRED ] to ; } String [ NO_PRED ] value { val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class F NO_PRED ref String [ NO_PRED ] name ; } class F { ref String [ NO_PRED ] name ; ref State [ 1 ] source ; ref State [ 1 ] target ; } String [ NO_PRED ] guard ; } class F { att State [ * ] owned ; val Transition [ * ] transition ; } String [ NO_PRED ] name ; } Initial NO_PRED NO_PRED ] initial ; att Final [ 1 ] final ; } class Initial { State { } abstract Final extends State { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package t class State { val State [ * ] states ; val Transition [ * ] transitions ; } abstract class State { att java [ NO_PRED ] name ; ref Transition [ NO_PRED ] outgoing ; ref Transition [ * ] incoming ; ref State [ 1 ] targets ; } class Initial { ref String [ NO_PRED ] name ; ref State [ 1 ] source ; ref state [ 1 ] target ; } Event [ NO_PRED ] trigger ; } abstract Initial extends State { } class Simple extends State { } NO_PRED Final extends State { } class Final { att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Named { att String [ 1 ] name ; val String [ 1 ] name ; att Column [ * ] col ; ref class Column { att String [ 1 ] name ; att String [ 1 ] name ; att Table [ 1 ] table ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package database class Pet { att String [ NO_PRED ] name ; } class Net { Named { val Node [ * ] places ; val Transition [ * ] transitions ; val class Place extends Named { ref Net [ 1 ] initial ; ref Token [ * ] out NO_PRED ref TP [ * ] in ; } class Transition extends Named { ref TP [ 1 ] net ; ref TP [ + ] in ; } TP [ + ] in ; } abstract Arc extends Arc { ref Place [ 1 ] transition ; ref Place [ 1 ] src ; ref class TP extends Arc { ref Place [ 1 ] src ; } Net [ 1 ] src ; } abstract class Transition { att int [ 1 ] weight ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package a NO_PRED Super { Dynamic { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type abstract Graph { val Node [ * ] nodes ; } N [ 1 ] graph ; } class Node { ref String [ NO_PRED ] name ; val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED Place { val String [ NO_PRED ] name ; val Ref [ * ] nodes ; } Arc [ * ] arcs ; } abstract class Node { att String [ 1 ] name ; } class Place extends Node { att class Place extends Node { att class Arc { ref String [ 1 ] name ; ref Node [ 1 ] source ; ref Node [ 1 ] target ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package hen NO_PRED class Named { } class Hello extends Ass { att class class Ass { } String [ NO_PRED ] name ; } int [ NO_PRED ] message ; } class Ass NO_PRED Ass { att class class Ass NO_PRED att abstract class Ass { Ass { } abstract class Direct { Ass { } class Order NO_PRED att Ass [ * ] test ; att class class Ass extends ref abstract class Multiple { Ass NO_PRED } class Ass extends } Test [ * ] test ; } int [ NO_PRED ] result NO_PRED } int [ NO_PRED ] fail NO_PRED att int [ NO_PRED ] errors ; } String [ NO_PRED ] result ; } int [ NO_PRED ] result NO_PRED att abstract class Range { Ass NO_PRED } Ass [ * ] result NO_PRED att class class Multiple ; Test { } }
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Base { att String [ NO_PRED ] name ; att String [ NO_PRED ] for ; } class Book { val int [ NO_PRED ] title ; } Author [ NO_PRED ] author ; } Author [ * ] E ; } class Library { att Author [ * ] list ; val Book [ NO_PRED ] list ; } abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java class MED { NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Tree { val Node [ NO_PRED ] nodes ; } class Node { att Node [ NO_PRED ] parents ; att String [ 1 ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met abstract Simulator { val Model [ * ] elements ; } abstract Abstract extends Abstract { val String [ 1 ] name ; val Abstract [ * ] elements ; } abstract Class { val class Import extends Abstract { att String [ NO_PRED ] name ; } class Type extends Abstract { att String [ NO_PRED ] name ; val class Data extends Type { ref class Entity extends Type { } Type [ NO_PRED ] super ; val Att [ * ] features ; } class Feature { att String [ NO_PRED ] many ; ref boolean [ NO_PRED ] name ; att Type [ NO_PRED ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class List NO_PRED val Persons [ + ] members ; } Male [ * ] works ; } Edge [ * ] lab ; att class Person { att List [ 1 ] list ; att String [ NO_PRED ] name ; att String [ NO_PRED ] last ; att String [ NO_PRED ] gender ; } Man [ 1 ] address ; } Living [ * ] home ; } abstract Work { att List [ 1 ] members ; att String [ NO_PRED ] name ; att NO_PRED Living { att Person [ * ] persons ; } String [ NO_PRED ] address ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e class A { att Exp [ NO_PRED ] exp ; val class Exp { } class Variable extends Binary { } Expression [ NO_PRED ] exp NO_PRED att Expression [ NO_PRED ] right ; } class Plus extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Mul extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Un extends Expression { val Expression [ NO_PRED ] left ; val Expression [ NO_PRED ] right ; } class Number extends Expression { att int [ NO_PRED ] value ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test abstract Person { val Person [ * ] persons ; } abstract class Person { att String [ NO_PRED ] name ; ref Date [ NO_PRED ] birthday ; } Person [ NO_PRED ] persons ; } class Male extends Person { } class Female extends Person { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Net { val Transition [ * ] places ; val Transition [ * ] transitions ; val Arc [ * ] arcs ; } abstract Place { } abstract Transition extends } abstract class Node { } int [ 1 ] weight ; } class Place extends Arc { ref Place [ 1 ] source ; ref Transition [ 1 ] target ; } class Trans extends Arc { ref Transition [ 1 ] source ; ref Place [ 1 ] target ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package met class HS { ref HS [ NO_PRED ] parent ; val String [ NO_PRED ] name ; } HS [ * ] children ; ref HS [ NO_PRED ] h ; att H [ 1 ] h ; att java [ NO_PRED ] a ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Place { val String [ NO_PRED ] name ; val String [ NO_PRED ] for NO_PRED val State NO_PRED * ] pet ; } class Pet NO_PRED Pet { ref class Arc extends Arc { ref class Place extends An { att NO_PRED Arc extends Node { } class Arc extends Node { val Token [ * ] token ; val abstract Arc extends Node { } Place [ 1 ] src ; ref Transition [ NO_PRED ] to ; } NO_PRED Pet extends Edge { ref Transition [ NO_PRED ] Cato ; ref Place [ NO_PRED ] to ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Tree { val Tree [ * ] children ; ref Tree [ NO_PRED ] parent ; att String [ NO_PRED ] label ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package o class Field { att String [ 1 ] name ; val Table [ * ] tables ; } Foreign [ * ] types ; val abstract Table { att String [ 1 ] name ; val Column [ * ] columns ; } column [ + ] primary ; } Foreign [ * ] records NO_PRED att Foreign [ * ] foreign ; } abstract Column { att Column [ 1 ] source ; ref Column [ * ] columns ; } class Type { att Column [ * ] elements ; } class Foreign { } String [ 1 ] name ; att Column [ * ] column ; att NO_PRED Base { att String [ 1 ] number ; val Record [ 1 ] type ; } String [ 1 ] type ; } String [ 1 ] type ; } NO_PRED Type [ att String [ 1 ] type ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package c { class M NO_PRED NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Persons NO_PRED Model { att java [ NO_PRED ] first ; att String [ NO_PRED ] last ; ref University [ NO_PRED ] address ; ref Person [ * ] contacts ; } class Address { att String [ NO_PRED ] street ; att String [ NO_PRED ] city ; att NO_PRED Category { att String [ NO_PRED ] first ; att String [ NO_PRED ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract E { val Block [ 1 ] next ; val Filter [ NO_PRED ] converter ; val abstract Integer extends Binary { } class class Un { } class Un extends Integer { att Integer [ + ] target ; val class And extends Binary { } class Or extends Binary { } class Not NO_PRED Un { } class Greater extends Binary { } class Lower extends Binary { } class Integer extends Integer { att int [ NO_PRED ] value ; } class Integer extends Integer { val Boolean [ 1 ] condition ; val Integer [ 1 ] condition ; } Integer [ 1 ] condition ; val class Un NO_PRED Integer { val Integer [ 1 ] then NO_PRED val Integer [ 1 ] then NO_PRED val class Not NO_PRED Integer extends att class X NO_PRED Integer { att class class Binary extends val abstract Boolean extends Binary { val class Binary { Binary { val class Boolean extends Binary { val class Integer NO_PRED Binary { emergencies abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED Course { att String [ NO_PRED ] code ; counselor Department [ * ] student ; val Special [ * NO_PRED 10 ] special ; } Course [ * ] courses ; ref int [ NO_PRED NO_PRED 10 ] mandatory ; ref class Special { att String [ NO_PRED ] name ; att String [ 1 ] name ; ref int [ NO_PRED ] credits ; att int [ NO_PRED ] status ; } class Special { att String [ NO_PRED ] credits ; att Class [ * ] courses ; ref String NO_PRED NO_PRED ] 5 ] course NO_PRED att class Sem { ref Course NO_PRED * ] courses ; att Course NO_PRED * ] courses ; att Course [ NO_PRED ] courses ; } String [ 1 ] optional ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED State { } class Super NO_PRED No { } String [ 0 ] a ; att java [ NO_PRED ] b ; att No [ NO_PRED ] state ; } State [ NO_PRED ] f NO_PRED } class F extends ref class F { ref class T { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED State { } E [ * ] single ; NO_PRED String [ NO_PRED ] reference ; att NO_PRED E { ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph class Named { att String [ 1 ] name ; } class Z NO_PRED Named { val Region [ * ] items ; val Graph [ * ] containers ; val abstract Graph extends Model { val Graph [ * ] nodes ; } abstract class Graph { ref Z NO_PRED 1 ] graph ; } String [ NO_PRED ] text ; } class Graph extends Graph { ref String [ NO_PRED ] shape ; att String [ NO_PRED ] node ; val String [ NO_PRED ] back ; att String [ NO_PRED ] width ; att double [ NO_PRED ] opacity ; } Graph [ * ] outgoing NO_PRED ref Graph [ * ] outgoing NO_PRED ref class Graph extends Graph NO_PRED ref boolean [ NO_PRED ] incoming ; ref String [ NO_PRED ] line ; } Connection [ NO_PRED ] line ; ref Graph NO_PRED NO_PRED ] line NO_PRED att Graph NO_PRED * ] source NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types NO_PRED Super { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract Address { att String [ NO_PRED ] name ; ref int [ NO_PRED ] age ; att Project [ NO_PRED ] NO_PRED ; } Employee [ * ] Works ; } NO_PRED Department { att String [ NO_PRED ] name ; att int [ NO_PRED ] address ; val int [ NO_PRED ] budget ; ref Employee [ * ] Works ; ref Project [ * ] Works ; } class Project { att int [ NO_PRED ] name ; att boolean [ NO_PRED ] budget ; ref Employee [ * ] Controls ; ref Project [ 1 ] Public ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package family @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Simple { Book { } String [ 1 ] title ; att Chapter [ * ] chapters ; } abstract Chapter { att String [ 1 ] title ; att int [ 1 ] n ; val boolean [ 1 ] author ; ref Book [ 1 ] book ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract Persons NO_PRED ref String [ 1 ] full ; ref Persons [ 1 ] model ; } abstract Male extends Male { } class Female extends Person { } NO_PRED Persons { val Person [ * ] persons ; } abstract namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Prim NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package domain @ Order { val Order [ NO_PRED ] products ; val Order NO_PRED NO_PRED ] shipment ; } Inv NO_PRED 1 ] invoice ; } Package NO_PRED + ] packages ; } abstract Product { att java [ NO_PRED ] value NO_PRED att class Package { att Order NO_PRED NO_PRED ] new ; } Order [ * ] order ; att class Im { val Package [ 1 ] packages ; val Sh [ * ] order ; val class Inv { ref Package [ 1 ] order ; } Transaction [ + ] payment ; ref class Package { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Families class class EN { att String [ 1 ] name ; } abstract Database extends Named { val Column [ + ] col ; } Column [ * ] key ; att Column [ 1 ] schema ; } class Column extends Named { att Table [ 1 ] owner ; ref Type [ NO_PRED ] key ; att Type [ 1 ] type ; } class Type extends Named { } @ Dat extends Named { val Table NO_PRED * ] tables ; val Type [ * ] types ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Named { att java [ NO_PRED ] ec ; val class Cap extends Infrastructure { val String [ NO_PRED ] name NO_PRED } String [ NO_PRED ] port NO_PRED att abstract Multiple { Container { att boolean [ NO_PRED ] Cluster ; att int [ NO_PRED ] status NO_PRED att String [ NO_PRED ] deploying ; att String [ NO_PRED ] is ; val class Model extends Infrastructure { att String [ NO_PRED ] endpoint NO_PRED att int [ NO_PRED ] management ; att String [ NO_PRED ] start ; } class Pers NO_PRED Infrastructure { att String [ NO_PRED ] parent ; val Hash [ * ] sub NO_PRED ref class Pers { } Object [ * ] parent NO_PRED val Container NO_PRED * ] children NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school NO_PRED Graph { val Node [ NO_PRED ] vert ; } edges [ * ] Ed NO_PRED } class Vert { att int [ NO_PRED ] name ; } Vert [ * ] destination ; att class Vert { att String [ NO_PRED ] name ; ref Vert [ 1 ] vert ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math NO_PRED States NO_PRED ref String [ NO_PRED ] name ; val States [ * ] machines ; } class Stat { att boolean [ NO_PRED ] initial ; att String [ NO_PRED ] name ; att int [ NO_PRED ] value ; ref Event [ * ] events ; } Transition [ * ] states ; } class State { att String [ NO_PRED ] name ; } class State { att boolean [ NO_PRED ] initial ; att String [ NO_PRED ] name ; val Stat [ * ] transitions ; } class Transition extends State { } String [ NO_PRED ] value ; } class Final extends State { abstract Stat [ NO_PRED ] initial ; ref class Transition { val Stat [ NO_PRED ] state ; } State [ NO_PRED ] trigger ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED Att { val Assignment NO_PRED 1 ] u ; val Action NO_PRED * ] statements ; } int [ NO_PRED ] name ; } class Token extends val Test [ * ] test ; } String [ NO_PRED ] id ; } class Test NO_PRED val String [ NO_PRED ] name ; att class Test { Named { } Variable [ * ] variable ; val Symbol [ * ] its NO_PRED val String descendants NO_PRED ] name ; att class Operation extends Variable { } class U { att Variable [ NO_PRED ] variable ; } String [ NO_PRED ] object ; ref String NO_PRED * ] rev ; att NO_PRED Variable { val Var NO_PRED NO_PRED ] condition NO_PRED val String [ NO_PRED ] object ; att NO_PRED U [ Condition NO_PRED att String [ NO_PRED ] request { val class Node { Statement NO_PRED } String [ NO_PRED ] action NO_PRED ref String [ NO_PRED ] trigger ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class Book { } String [ 1 ] title ; att int [ NO_PRED ] pages ; att Book [ NO_PRED ] category ; ref Writer [ 1 ] author ; } NO_PRED Library { att String [ NO_PRED ] name ; val Writer [ * ] writers ; val Book [ * ] books ; } class Writer { att String [ NO_PRED ] name ; ref Book [ * ] books ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Process { att String [ 1 ] name ; val Process [ * ] process ; } class Work extends Process { ref R [ * ] links ; ref Work unusual * ] links ; att String [ 1 ] name ; } class Work extends Process { ref Work [ 1 ] link ; ref Work [ 1 ] predecessor ; ref Work [ 1 ] successor ; } NO_PRED Guid { } class Guid extends Process { att String [ 1 ] text ; } Process [ * ] text ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f NO_PRED Input { } B [ NO_PRED ] a ; } M [ NO_PRED ] b ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph class Package NO_PRED val Package [ * ] owning ; } Package NO_PRED 1 ] package ; att class Class { ref Class [ 1 ] class ; } Class [ rept ] class NO_PRED } NO_PRED Prim { ref Root [ 1 ] root ; val Root [ 1 ] root ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat NO_PRED Type { att Type [ * ] types ; } java [ NO_PRED ] name ; val abstract Type { Named { ref Feature [ * ] features ; } Type [ * ] super ; } Library [ NO_PRED ] owning ; } class class Feature { Typ { Located { } Type [ NO_PRED ] owning ; } class Operation extends Feature { val Param [ * ] parameters ; att class Param extends Feature { } abstract Param extends Typ NO_PRED Named { ref Operation [ NO_PRED ] owning ; } class class Typ { ref Type [ NO_PRED ] type ; } NO_PRED Type NO_PRED Feature { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract Stat NO_PRED ref State [ * ] objects ; att Transition [ * ] config ; } String [ NO_PRED ] name ; } class class State { att String [ NO_PRED ] label ; att class Transition extends State { att State NO_PRED 1 ] pre ; ref State [ NO_PRED ] target ; } String [ NO_PRED ] label ; att String [ NO_PRED ] guard ; } Action [ * ] action ; val abstract class Action NO_PRED State { att String [ NO_PRED ] t ; att class Composite extends ref String [ NO_PRED ] name ; val boolean [ NO_PRED ] action ; att State [ * ] action NO_PRED } class Guard [ att String [ NO_PRED ] object ; } String [ NO_PRED ] variable ; ref class Transition NO_PRED State NO_PRED ref Condition [ NO_PRED ] condition ; } class Initial NO_PRED State NO_PRED ref NO_PRED Lab NO_PRED State NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class Mars { val Transition [ * ] greet ; } class G { att G [ NO_PRED ] e ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Person { att String [ NO_PRED ] number ; att Employee [ * ] employees ; att class Company { att int [ NO_PRED ] name ; att String [ NO_PRED ] last ; att String [ NO_PRED ] salary ; ref NO_PRED Company { att String [ NO_PRED ] name ; val Employee [ NO_PRED ] departments ; att NO_PRED Employee { att int [ NO_PRED ] test ; att String [ NO_PRED ] test ; att String [ NO_PRED ] number ; att boolean [ NO_PRED ] int ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package family NO_PRED Test { } java [ NO_PRED ] test ; } Test NO_PRED NO_PRED ] test ; att NO_PRED Test { att NO_PRED Test { att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package my NO_PRED Trace { val Trace [ * ] g ; } Event [ * ] child ; val Tim [ * melan graph ; val Test [ * ] tool ; val class class Tr { ref java [ NO_PRED ] weight ; ref String [ NO_PRED ] timed ; } class class Color { Trace { val String [ NO_PRED ] pattern ; ref class Tr extends Abstract { } Label [ 1 ] label ; val Label [ * ] comp ; } class u extends Trace { val class Group { Trace { att abstract Link { Top { } E { * ] compartment { } class Link { Source { } class Link { Group { } class Link { Model { } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package p class Region extends val String [ 1 ] name ; val State [ + ] ast ; } abstract class Abstract { att String [ NO_PRED ] id ; val Abstract [ * ] sub ; } class State extends Abstract { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar class Families NO_PRED att String [ 1 ] last ; att Member [ 1 ] father ; val Member [ 1 ] mother ; val Member [ * ] sons ; val Member [ * ] daughters ; } abstract Member { att String [ 1 ] first ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package school class Families NO_PRED att String [ 1 ] last ; val Member [ + ] father ; val Member [ 1 ] mother ; val Member [ * ] sons ; val Member [ * ] daughters ; } class Member { att String [ 1 ] first ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; ref Family [ NO_PRED ] family ; } NO_PRED namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Prim NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph NO_PRED Class { att String [ 1 ] bar ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet abstract Person { att Department [ + ] du ; } class Dept { Ex { att String [ NO_PRED ] name ; att Sub [ + ] manager ; val Sub [ * ] sub ; val abstract Employee { Sub { att Sub [ * ] person ; } String [ 1 ] salary ; att NO_PRED Person { att String [ 1 ] name ; att double [ 1 ] address ; } class class Sub { ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple abstract Company { Legal { val Department [ * ] departments ; att class Customer extends Named { val Employee [ * ] works ; } int [ NO_PRED ] number ; } int [ NO_PRED ] number ; ref NO_PRED Person { att String [ NO_PRED ] name ; } NO_PRED Employee extends Named { att String [ NO_PRED ] age ; att String [ NO_PRED ] last ; } java [ NO_PRED ] age ; } Employee [ NO_PRED ] manager ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math class Block { val In [ * ] el ; val class Element { ref String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study class Test { ref B [ NO_PRED ] b NO_PRED } class B { Named { ref class C { ref NO_PRED D { B NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED @ class Class { } NO_PRED Ex extends val NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package e abstract Class { att String [ NO_PRED ] title ; att String [ 1 ] author ; att int [ NO_PRED ] pages ; att Book [ 1 ] present ; ref class Customer { att String [ 1 ] name ; ref Date [ * ] shelves ; ref Person [ * ] friends ; } class Book { att String [ 1 ] shelf ; val Book [ * ] books ; } Person [ * ] customer ; } NO_PRED University { val Book [ * ] people ; val Book [ * ] books ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet NO_PRED class Di extends Figure { val B [ * ] contains ; val class Di extends Generic { val
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat abstract University { val Person [ * ] people ; } class Person { att String [ 1 ] name ; att String [ NO_PRED ] last ; att Person [ NO_PRED NO_PRED 2 ] parents ; ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package feature class Column { R { ref String [ 1 ] type ; ref Table [ 1 ] foreign ; ref Foreign [ * ] foreign ; } Table [ 1 ] key ; } NO_PRED Foreign extends R { ref Column [ NO_PRED ] refers ; ref Column [ * ] column ; } Table [ 1 ] owner ; } class Foreign extends R { ref Table [ 1 ] owner ; ref Column [ * ] column ; } class class R { att String [ NO_PRED ] name ; } String [ NO_PRED ] comment ; att NO_PRED Sche extends R { val Sche [ * ] tables ; val NO_PRED Foreign extends R { att Column [ * ] column ; ref Sche [ * ] parent ; } Column [ * ] types ; ref View NO_PRED * ] foreign ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext NO_PRED Unit { ref Unit [ NO_PRED ] unit ; val String [ 1 ] unit ; } class Unit { } class Base { } String [ 1 ] units ; } NO_PRED Unit { val Base [ * ] units ; } class Unit extends Unit { val Unit [ * ] units ; val class Unit extends Unit { val Unit [ NO_PRED ] unit ; att int [ 1 ] exponent ; } class Unit extends Unit { ref Base [ NO_PRED ] unit ; } class Unit { val E [ * ] model ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Library { att String [ NO_PRED ] name ; val Writer NO_PRED * ] members ; } Book [ * ] books ; } abstract Book { att String [ NO_PRED ] name ; att Book [ * ] books ; } NO_PRED Book { ref String [ NO_PRED ] name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet NO_PRED Book { val Book [ * ] books ; val Book [ * ] authors ; } abstract Book { att String [ NO_PRED ] title ; } String [ NO_PRED ] name ; att Author [ NO_PRED ] authors ; } String [ NO_PRED ] n ; att Chapter [ * ] sections ; } class Chapter { val String [ NO_PRED ] title ; } NO_PRED Writer { att String [ NO_PRED ] first ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Table { val Class NO_PRED * ] classes ; val Association [ * ] attribute ; } abstract Class extends att String [ NO_PRED ] name ; val Att [ * ] attribute ; } class Att { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class class Named { ref Transition [ * ] out ; } class Transition extends Ver { att String [ NO_PRED ] name ; } Complex [ NO_PRED ] super ; val class Pse extends Ver { att Pse [ NO_PRED ] kind ; } java [ NO_PRED ] id ; } class Complex extends Region { val Region [ NO_PRED ] region ; } class Transition { ref String [ NO_PRED ] id ; ref Ver [ 1 ] target ; ref Ver [ 1 ] target ; ref class Pse extends Region { val Connection [ NO_PRED ] states ; att State [ + ] actions ; } java [ NO_PRED ] trigger ; } class State [ att State [ * ] actions ; att Event [ 1 ] actions NO_PRED att class Pse [ Transition [ att Region [ * ] entry ; ref class Internal [ } State [ NO_PRED ] action NO_PRED ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package database class Field { E NO_PRED val Decl [ * ] attributes ; val class Decl { att String [ NO_PRED ] name ; att Cl [ 1 ] dest ; } String [ 1 ] direct ; att String [ 1 ] title NO_PRED att class Declaration extends val Prim [ 1 ] name ; att class Prim NO_PRED att Declaration [ NO_PRED ] commands ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Fair { att M [ 1 ] diagram ; val E [ 1 ] diagram ; ref abstract Se extends M { val E [ 1 ] images ; val boolean [ NO_PRED ] extension ; att abstract M extends ref Node [ + ] m ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types NO_PRED New { val String [ 1 ] name ; val Abstract [ * ] states ; val Transition [ * ] transition ; } class State { ref boolean [ NO_PRED ] name ; } Transition [ NO_PRED ] outgoing NO_PRED ref Transition [ * ] in ; } boolean [ NO_PRED ] label ; } class Transition { att String [ NO_PRED ] name ; ref State [ 1 ] pre ; } State [ NO_PRED ] source ; } NO_PRED State extends State { } class End extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math class Company { att String [ 1 ] name ; val Employee [ * ] employees ; val Company [ 1 ] size ; ref class Employee { att String [ NO_PRED ] name ; } Employee [ NO_PRED ] manager ; ref Company [ 1 ] company ; ref Employee [ * ] direct ; ref Employee [ * ] all ; ref Employee [ * ] reporting ; att boolean [ NO_PRED ] has ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package types abstract An { Class NO_PRED val abstract class Module extends Named { val Class [ NO_PRED ] next NO_PRED } class X extends Java { } Library [ * ] context ; } class Library extends Coordinator { Operation { } class NO_PRED extends O { } class Non extends Iter { Operation { val int [ NO_PRED ] is ; } boolean [ NO_PRED ] is ; ref Rule [ * ] params ; val Param [ * ] owned ; } class ID extends Operation [ Module extends } int [ NO_PRED ] method NO_PRED val String [ NO_PRED ] is ; ref boolean [ NO_PRED ] is ; ref Operation NO_PRED NO_PRED ] is ; ref abstract Module NO_PRED M [ } Statement [ NO_PRED ] operation { } abstract Library [ Operation [ Att [ att String [ NO_PRED ] method NO_PRED att class M [ Rule NO_PRED } class M [ Named [ Rule NO_PRED att java NO_PRED NO_PRED ] package NO_PRED att class Pers [ Order property att String NO_PRED * ] restriction NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ext class Trace extends ref Cyber [ NO_PRED ] c ; ref Deploy [ 1 ] deployment ; } CPS [ * ] traces ; } class CPS { ref Ident [ * ] c ; ref Deploy [ * ] deployment ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Component { att Port NO_PRED * ] ports ; } class class Port { } class Connect { ref Port [ * ] in ; ref Port [ * ] out ; } class In extends Port { ref class Out extends Port { } class Service extends Port { } In [ NO_PRED ] type ; } class Att extends Port { ref Out [ NO_PRED ] type ; ref class Composite { val Component [ * ] in ; att Component NO_PRED NO_PRED ] type ; val class Composite { ref NO_PRED Out { ref Port [ * ] in NO_PRED ref Port [ * ] out ; } Connect [ NO_PRED ] type ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java class class Node { att String [ NO_PRED ] name ; } Tree [ NO_PRED ] parent ; } class Node NO_PRED Tree { } class Node extends Tree { } Context [ NO_PRED ] children ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Entity { att Class [ NO_PRED ] classes ; } class Class { att Att [ * ] attributes ; } String [ 1 ] name ; ref class Att { att String [ NO_PRED ] name ; att Att [ NO_PRED ] type ; att String [ NO_PRED ] type ; att class Association { att String [ NO_PRED ] name ; } String [ NO_PRED ] is ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test NO_PRED Node { val Node [ * ] edges ; val Node [ 1 ] vert ; } boolean [ NO_PRED ] name ; } int [ NO_PRED ] strict ; } class Node { ref Graph [ NO_PRED ] target ; ref String [ NO_PRED ] name ; } Sem [ * ] entry ; } class Edge { ref Ver [ 1 ] graph ; att Ver [ 1 ] source ; ref Ver [ 1 ] target ; } String [ NO_PRED ] label ; } Label [ * ] entries ; } class Control { ref String [ NO_PRED ] key ; } String [ NO_PRED ] description ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class class Element { att String [ 1 ] location ; } abstract class Named extends Located { att String [ 1 ] name ; } abstract Pet extends Named { val Element [ * ] elements ; val Arc [ * ] arcs ; } abstract class Element extends Named { ref Pet [ 1 ] net ; } class Place extends Element { ref Transition [ * ] incoming ; ref Place [ * ] outgoing ; } class Transition extends Element { ref Place [ * ] incoming ; ref Trans [ + ] outgoing ; } NO_PRED class Arc extends Named { ref int [ 1 ] weight ; } Pet [ 1 ] weight ; } class Place extends Element { ref Place NO_PRED 1 ] net NO_PRED } Net NO_PRED 1 ] t NO_PRED ref class Place [ Node { ref Place NO_PRED 1 ] incoming NO_PRED ref Pet NO_PRED 1 ] incoming NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library class MO { att String [ NO_PRED ] name ; val State [ * ] transitions ; val Initial [ NO_PRED ] state ; val class State { att String [ NO_PRED ] name ; } class Transition { att String [ NO_PRED ] name ; ref State [ NO_PRED ] source ; ref State [ 1 ] source ; } int [ NO_PRED ] event ; att NO_PRED State extends State { } class Final extends State { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class Concept { } class Concept extends Concept { } int [ NO_PRED ] name ; } class Concept { att Concept [ * ] ax ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package study NO_PRED Model { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package university class Transition { val State [ * ] owned ; val Transition [ NO_PRED ] initial ; } class State { Named { } String [ NO_PRED ] name ; ref Block [ NO_PRED ] entry ; val Action [ NO_PRED ] exit ; val class Final extends State { } class Final extends State { } class Final { att String [ NO_PRED ] name ; ref String [ NO_PRED ] effect ; val State [ 1 ] src ; ref Super [ 1 ] source ; } Super [ 1 ] Source ; att NO_PRED Super extends Super { } class State { } F [ * ] transition NO_PRED ref class Final { att String [ NO_PRED ] action ; } NO_PRED Action { att String [ NO_PRED ] action ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U abstract X { att String [ NO_PRED ] name ; } class E { Test { val Test [ * ] test ; ref class Test extends Named { att Expression [ + ] test ; val Test [ NO_PRED ] test ; } class Ass { Named { ref String [ 1 ] description ; val Ass [ NO_PRED ] status ; } Test [ + ] action ; } Test [ 1 ] test ; } NO_PRED Ass { att String [ NO_PRED ] value ; } class Class { Sc { att Base [ NO_PRED ] exception ; att NO_PRED Action extends att String [ NO_PRED ] value NO_PRED att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package type abstract St extends Node NO_PRED Element { } abstract Association extends Beh NO_PRED Element { } class Collabor extends Class NO_PRED Element { } class Association extends Class NO_PRED Element { } class Model extends Behavior NO_PRED Element { } class State extends Behavioral NO_PRED Element { } abstract Class extends Behavioral NO_PRED Element { } class St extends Node NO_PRED Element { } abstract Use extends State NO_PRED Element { } class class Enc extends Class { } Behavior [ * ] owned ; ref Behavior [ NO_PRED ] class ; } class Execution extends Beh NO_PRED Enc { } class Execution extends Class NO_PRED Element { } class Behavior extends Class NO_PRED Element { } class class Behavior extends Class NO_PRED Element { } Beh NO_PRED NO_PRED ] destination ; } class Behavior extends Class NO_PRED Element { } abstract Execution [ Beh NO_PRED Element { } class Collabor NO_PRED Class NO_PRED Element { } class class Node NO_PRED Node { } class class Association { att boolean NO_PRED * ] Class NO_PRED } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package d class Book { att String [ NO_PRED ] name ; val Book [ * ] writers ; val Book [ * ] books ; val class Writer { att String [ NO_PRED ] name ; att String [ NO_PRED ] last ; ref Book [ * ] books ; } class Book { att String [ NO_PRED ] title ; att int [ NO_PRED ] pages ; att Writer [ 1 ] writers ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package t NO_PRED A { att String [ NO_PRED ] name ; att int [ * ] password ; } class State { att boolean [ NO_PRED ] u ; val User [ * ] members ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package math class Tree { att Node [ * ] children ; att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library NO_PRED namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package E class Met NO_PRED } String [ 1 ] probe ; att Met [ + ] metric ; ref class class Met { } java [ 1 ] name NO_PRED att abstract Value extends Met { att String [ + ] value ; } class Integer extends Met { att java [ 1 ] value ; } class Integer extends Met { att java [ 1 ] value ; } class Real NO_PRED Met { att double [ 1 ] value ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package u class Process { att String [ 1 ] name ; val Process [ * ] process ; } class Work extends Process { ref R [ * ] links ; ref Work [ * ] links ; att String [ 1 ] name ; ref class Work extends Process { att Work [ 1 ] link ; ref R [ 1 ] predecessor ; ref Work [ 1 ] successor ; } NO_PRED class Process { } class Guid extends Process { ref Process [ * ] element ; att String [ 1 ] text ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package simple class Net { val Page [ * ] greet ; } class G { att String [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree abstract Company { att String [ 1 ] name ; val Department [ * ] employees ; } Agency [ * ] departments ; } class Employee { att Employee [ * ] has ; att int [ 1 ] n ; att int [ NO_PRED ] name ; val Employee [ * ] employees ; } Manager [ NO_PRED ] company ; } class Employee { att String [ NO_PRED ] mandatory ; ref Employee [ NO_PRED ] department ; att Employee [ * ] manager ; } juicy [ * ] managed ; ref int [ * ] lines ; att String [ 1 ] name ; } Employee [ NO_PRED ] company ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package model class Model { Kind { val B [ * ] b ; } C [ * ] e ; } class B extends Named { val D [ NO_PRED ] cs ; } class C extends Named { } class Named { att String [ NO_PRED ] name ; } class D extends Named { val F [ * ] fs ; } NO_PRED Named extends Named { } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package pet class Net { ref Node [ * ] places ; val Transition [ * ] transitions ; val class Place { ref String [ NO_PRED ] input ; ref Action [ * ] in ; ref class Place { att String [ NO_PRED ] name ; ref int [ NO_PRED ] tokens ; } PT [ * ] out ; } class PT { Arc { ref Transition [ NO_PRED ] source ; ref Place [ 1 ] source ; } class TP { Arc { ref Transition [ 1 ] source ; ref Transition [ 1 ] source ; } NO_PRED Arc { ref int [ NO_PRED ] weight ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java class Library { att String [ 1 ] name ; val Book [ * ] books ; val Loan [ * ] loans ; val Member [ * ] members ; } class Book { att String [ NO_PRED ] name ; att java [ NO_PRED ] copies ; ref Library [ NO_PRED ] library ; ref Loan { * ] loans ; } class Member { att String [ 1 ] name ; ref Library [ NO_PRED ] library ; ref class Loans { ref Book [ 1 ] book ; ref Member [ 1 ] member ; ref Date [ NO_PRED ] date ; ref NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f class State NO_PRED att String [ NO_PRED ] name ; } F [ NO_PRED ] Composite ; ref Transition [ NO_PRED ] owning ; ref class State { att String [ NO_PRED ] input ; ref State [ 1 ] source ; ref String [ NO_PRED ] effect ; ref State [ 1 ] source ; att State [ 1 ] owning ; } Composite [ NO_PRED ] owning ; val class Composite extends State { val State [ * ] owned ; ref State [ * ] owned ; ref class Named { att Region [ * ] owned ; } State [ * ] owned ; } NO_PRED Initial extends State { att class Final extends State { ref NO_PRED
<s> @ namespace standoff ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class Met NO_PRED att rave [ NO_PRED ] name ; att String [ NO_PRED ] description ; att String [ 1 ] type ; att int [ NO_PRED ] cont ; att Date [ NO_PRED ] triggered ; } int [ NO_PRED ] unit ; att class Agg NO_PRED Met { att String [ NO_PRED ] name ; att String [ NO_PRED ] activity ; } class Energy extends Met { att String [ NO_PRED ] triggered ; att NO_PRED Range { val String [ NO_PRED ] id ; val Met [ * ] based ; val class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package Pet class H { ref H [ NO_PRED ] parent ; att H [ * ] children ; } String [ 1 ] h ; att java [ NO_PRED ] name ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f abstract Package { Base { val String [ NO_PRED ] name ; att String [ NO_PRED ] name ; val Message NO_PRED * ] messages ; } class Message extends ref String [ NO_PRED ] u ; ref String [ NO_PRED ] name ; att Message [ * ] transl ; val class Translation { val String [ NO_PRED ] u ; att String [ NO_PRED ] name ; att Message [ 1 ] lang ; ref class Translation { att String [ NO_PRED ] u ; att String [ NO_PRED ] name NO_PRED att String [ NO_PRED ] name ; } String [ NO_PRED ] lang ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package f NO_PRED class Type { Named NO_PRED ref Feature [ * ] constraints ; } abstract class Type extends Typ { Named { val Operation [ NO_PRED ] owning ; } abstract Variable extends Feature { att Param [ * ] parameters ; att class Param extends Feature { ref abstract Param extends Named { Named { ref Operation [ NO_PRED ] owning ; } abstract class Typ { ref Type [ NO_PRED ] type ; } abstract Param extends Feature { } class General extends Prim { val En [ * ] enumer ; } class En extends Type NO_PRED } Prim [ NO_PRED ] owning ; } class Prim extends Prim NO_PRED ref En [ * ] elements ; } Prim [ * ] types ; } class En extends Named { ref En [ NO_PRED ] type NO_PRED } String NO_PRED NO_PRED ] instance NO_PRED } class Named { Object { att Object NO_PRED NO_PRED ] instance extends } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package domain NO_PRED Super { } B [ * ] b ; att E [ * ] k ; } M [ * ] named ; } abstract B extends Named { val A [ * ] cs ; val class C extends Named { } class Named { att String [ NO_PRED ] name ; } class D extends Named { } E [ NO_PRED ] e ; } class E extends Named { } NO_PRED M extends J { att G [ * ] g ; } G [ * ] h ; } NO_PRED G extends Named { } NO_PRED I extends F { M { } class M extends Named { } NO_PRED Named extends Named { } M [ * ] l ; } class ls extends Named { ref class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U abstract User att val A [ * ] students ; val Teacher [ * ] contains ; att Student NO_PRED * ] packages ; } abstract Employee { att String [ NO_PRED ] ID ; att Course [ * ] contains ; ref Course NO_PRED * ] cont ; val java [ NO_PRED ] name ; } class Course NO_PRED att float [ NO_PRED ] ID ; att Course [ * ] contains ; ref Course [ * ] may NO_PRED } Date [ NO_PRED ] start ; } NO_PRED Course { att int [ NO_PRED ] ID ; ref Im [ NO_PRED ] NO_PRED NO_PRED ref Date [ NO_PRED ] name ; att class Student { att String [ * ] IS ; att String [ NO_PRED ] number NO_PRED att int [ NO_PRED ] ID NO_PRED att boolean [ NO_PRED ] credit ; att Study NO_PRED NO_PRED ] status NO_PRED att class University NO_PRED val boolean [ NO_PRED ] precision ; att String [ NO_PRED ] NO_PRED NO_PRED att String [ NO_PRED ] required ; att class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package ar abstract My { } B [ NO_PRED ] my ; val B [ * ] A ; } class B { } class C { } B [ * ] B ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package tree class Concept { val class Concept extends Concept { } NO_PRED Concept { } Concept [ NO_PRED ] concept ; val Concept [ 1 ] concept ; val Concept [ 1 ] concept NO_PRED } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package library @ Met NO_PRED val Met [ + ] simple ; } Met [ * ] aggregation ; val Met [ * ] Agg ; val String [ NO_PRED ] name ; } class class Met { att String [ NO_PRED ] name NO_PRED att abstract Simple extends Met { att String [ NO_PRED ] Met ; } class String extends Met { att int [ 1 ] Value NO_PRED att int [ 1 ] Max ; att int [ 1 ] minimum ; } int [ 1 ] Value ; att float [ 1 ] Weight ; ref class Agg extends Base { att java [ 1 ] Range NO_PRED att float [ 1 ] Value ; att float [ NO_PRED ] Mean NO_PRED att float [ 1 ] standard NO_PRED att int [ NO_PRED ] total NO_PRED att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package test class Root { att String [ NO_PRED ] enum NO_PRED att En [ NO_PRED ] en ; } NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat class Not extends View NO_PRED ref View [ 1 ] source ; ref View [ 1 ] target ; val Bend [ * ] bend ; val Anch [ NO_PRED ] source ; val Anch [ NO_PRED ] target ; att class Node extends View { att Layout [ NO_PRED ] layout ; } class class Style { } class Fill extends Style { att int [ NO_PRED ] fill ; att int [ NO_PRED ] transparency ; } int [ NO_PRED ] color NO_PRED att class Line extends Style { att float [ NO_PRED ] line ; val
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U NO_PRED L { val State [ * ] states ; } State [ 1 ] initial ; ref State [ + ] final ; ref State NO_PRED 1 ] final ; att String [ NO_PRED ] name ; } class State { ref State [ 1 ] owning ; att String [ NO_PRED ] name ; att Transition [ * ] outgoing ; } Transition [ * ] inc ; } class Transition { ref State [ 1 ] source ; ref State [ 1 ] target ; att String [ NO_PRED ] input ; att String [ NO_PRED ] output ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package graph NO_PRED Person { att String [ 1 ] first ; att int [ NO_PRED ] Credit ; att Boolean [ NO_PRED ] Phone ; att Employee [ * ] skills ; } abstract Person { att String [ NO_PRED ] Name ; att NO_PRED
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package java class class An { ref abstract class Feature { ref abstract class Abstract { } abstract Feature NO_PRED Feature { val boolean [ NO_PRED ] name ; val String [ 1 ] description ; val String [ NO_PRED ] version ; ref Feature NO_PRED * ] features ; } class Leaf NO_PRED Feature { att String [ NO_PRED ] name ; att Boolean [ NO_PRED ] description ; val String [ NO_PRED ] version ; val String [ NO_PRED ] version ; val Feature [ * ] parent ; att Feature [ * ] features [ } abstract NO_PRED extends Feature { att int [ NO_PRED ] version NO_PRED att Feature NO_PRED 1 ] version NO_PRED att Double [ NO_PRED ] version ; att abstract
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package min @
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package U class ER extends Named { val Entity [ * ] entities ; } class Entity extends Named { val Feature [ * ] features ; } class class Feature extends Named { } class Att extends Feature { att String [ 1 ] type ; } class Weak extends Reference { } class Strong extends Reference { } class class Named { att String [ NO_PRED ] name ; } abstract class Reference extends Feature { ref Entity [ 1 ] type ; } class
<s> @ namespace ( ur = NO_PRED NO_PRED prefix = NO_PRED ) package stat class Web { val Inner [ 1 ] hyper ; val Content [ 1 ] content ; att String [ 1 ] name ; } abstract Hyper { val Page [ + ] pages ; ref Page [ 1 ] home ; att class Content { val Class [ * ] classes ; } class Class { att Att [ * ] attributes ; } Att [ 1 ] representative ; att String [ 1 ] name ; } abstract Att { att String [ 1 ] name ; att SW [ 1 ] type ; att class class Att { att String [ 1 ] title ; val Page [ + ] links ; ref class Link [ Dynamic { } String [ 1 ] index ; } class Link NO_PRED Dynamic { } class class Dynamic { Dynamic { ref Dynamic NO_PRED 1 ] default { } class Dynamic { Dynamic { ref abstract class Dynamic { } Dynamic { 1 ] file NO_PRED } class Link { Dynamic { ref abstract Static { Link { att class
